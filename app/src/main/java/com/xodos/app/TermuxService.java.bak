package com.xodos.app;

import android.annotation.SuppressLint;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.net.wifi.WifiManager;
import android.os.Binder;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.os.PowerManager;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.xodos.R;
import com.xodos.app.event.SystemEventReceiver;
import com.xodos.app.terminal.xodosTerminalSessionActivityClient;
import com.xodos.app.terminal.xodosTerminalSessionServiceClient;
import com.xodos.shared.xodos.plugins.xodosPluginUtils;
import com.xodos.shared.data.IntentUtils;
import com.xodos.shared.net.uri.UriUtils;
import com.xodos.shared.errors.Errno;
import com.xodos.shared.shell.ShellUtils;
import com.xodos.shared.shell.command.runner.app.AppShell;
import com.xodos.shared.xodos.settings.properties.xodosAppSharedProperties;
import com.xodos.shared.xodos.shell.command.environment.xodosShellEnvironment;
import com.xodos.shared.xodos.shell.xodosShellUtils;
import com.xodos.shared.xodos.xodosConstants;
import com.xodos.shared.xodos.xodosConstants.xodos_APP.xodos_ACTIVITY;
import com.xodos.shared.xodos.xodosConstants.xodos_APP.xodos_SERVICE;
import com.xodos.shared.xodos.settings.preferences.xodosAppSharedPreferences;
import com.xodos.shared.xodos.shell.xodosShellManager;
import com.xodos.shared.xodos.shell.command.runner.terminal.xodosSession;
import com.xodos.shared.xodos.terminal.xodosTerminalSessionClientBase;
import com.xodos.shared.logger.Logger;
import com.xodos.shared.notification.NotificationUtils;
import com.xodos.shared.android.PermissionUtils;
import com.xodos.shared.data.DataUtils;
import com.xodos.shared.shell.command.ExecutionCommand;
import com.xodos.shared.shell.command.ExecutionCommand.Runner;
import com.xodos.shared.shell.command.ExecutionCommand.ShellCreateMode;
import com.xodos.terminal.TerminalEmulator;
import com.xodos.terminal.TerminalSession;
import com.xodos.terminal.TerminalSessionClient;

import java.util.ArrayList;
import java.util.List;

/**
 * A service holding a list of {@link xodosSession} in {@link xodosShellManager#mxodosSessions} and background {@link AppShell}
 * in {@link xodosShellManager#mxodosTasks}, showing a foreground notification while running so that it is not terminated.
 * The user interacts with the session through {@link xodosActivity}, but this service may outlive
 * the activity when the user or the system disposes of the activity. In that case the user may
 * restart {@link xodosActivity} later to yet again access the sessions.
 * <p/>
 * In order to keep both terminal sessions and spawned processes (who may outlive the terminal sessions) alive as long
 * as wanted by the user this service is a foreground service, {@link Service#startForeground(int, Notification)}.
 * <p/>
 * Optionally may hold a wake and a wifi lock, in which case that is shown in the notification - see
 * {@link #buildNotification()}.
 */
public final class xodosService extends Service implements AppShell.AppShellClient, xodosSession.xodosSessionClient {

    /** This service is only bound from inside the same process and never uses IPC. */
    class LocalBinder extends Binder {
        public final xodosService service = xodosService.this;
    }

    private final IBinder mBinder = new LocalBinder();

    private final Handler mHandler = new Handler();


    /** The full implementation of the {@link TerminalSessionClient} interface to be used by {@link TerminalSession}
     * that holds activity references for activity related functions.
     * Note that the service may often outlive the activity, so need to clear this reference.
     */
    private xodosTerminalSessionActivityClient mxodosTerminalSessionActivityClient;

    /** The basic implementation of the {@link TerminalSessionClient} interface to be used by {@link TerminalSession}
     * that does not hold activity references and only a service reference.
     */
    private final xodosTerminalSessionServiceClient mxodosTerminalSessionServiceClient = new xodosTerminalSessionServiceClient(this);

    /**
     * xodos app shared properties manager, loaded from xodos.properties
     */
    private xodosAppSharedProperties mProperties;

    /**
     * xodos app shell manager
     */
    private xodosShellManager mShellManager;

    /** The wake lock and wifi lock are always acquired and released together. */
    private PowerManager.WakeLock mWakeLock;
    private WifiManager.WifiLock mWifiLock;

    /** If the user has executed the {@link xodos_SERVICE#ACTION_STOP_SERVICE} intent. */
    boolean mWantsToStop = false;

    private static final String LOG_TAG = "xodosService";

    @Override
    public void onCreate() {
        Logger.logVerbose(LOG_TAG, "onCreate");

        // Get xodos app SharedProperties without loading from disk since xodosApplication handles
        // load and xodosActivity handles reloads
        mProperties = xodosAppSharedProperties.getProperties();

        mShellManager = xodosShellManager.getShellManager();

        runStartForeground();

        SystemEventReceiver.registerPackageUpdateEvents(this);
    }

    @SuppressLint("Wakelock")
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Logger.logDebug(LOG_TAG, "onStartCommand");

        // Run again in case service is already started and onCreate() is not called
        runStartForeground();

        String action = null;
        if (intent != null) {
            Logger.logVerboseExtended(LOG_TAG, "Intent Received:\n" + IntentUtils.getIntentString(intent));
            action = intent.getAction();
        }

        if (action != null) {
            switch (action) {
                case xodos_SERVICE.ACTION_STOP_SERVICE:
                    Logger.logDebug(LOG_TAG, "ACTION_STOP_SERVICE intent received");
                    actionStopService();
                    break;
                case xodos_SERVICE.ACTION_WAKE_LOCK:
                    Logger.logDebug(LOG_TAG, "ACTION_WAKE_LOCK intent received");
                    actionAcquireWakeLock();
                    break;
                case xodos_SERVICE.ACTION_WAKE_UNLOCK:
                    Logger.logDebug(LOG_TAG, "ACTION_WAKE_UNLOCK intent received");
                    actionReleaseWakeLock(true);
                    break;
                case xodos_SERVICE.ACTION_SERVICE_EXECUTE:
                    Logger.logDebug(LOG_TAG, "ACTION_SERVICE_EXECUTE intent received");
                    actionServiceExecute(intent);
                    break;
                default:
                    Logger.logError(LOG_TAG, "Invalid action: \"" + action + "\"");
                    break;
            }
        }

        // If this service really do get killed, there is no point restarting it automatically - let the user do on next
        // start of {@link Term):
        return Service.START_NOT_STICKY;
    }

    @Override
    public void onDestroy() {
        Logger.logVerbose(LOG_TAG, "onDestroy");

        xodosShellUtils.clearxodosTMPDIR(true);

        actionReleaseWakeLock(false);
        if (!mWantsToStop)
            killAllxodosExecutionCommands();

        xodosShellManager.onAppExit(this);

        SystemEventReceiver.unregisterPackageUpdateEvents(this);

        runStopForeground();
    }

    @Override
    public IBinder onBind(Intent intent) {
        Logger.logVerbose(LOG_TAG, "onBind");
        return mBinder;
    }

    @Override
    public boolean onUnbind(Intent intent) {
        Logger.logVerbose(LOG_TAG, "onUnbind");

        // Since we cannot rely on {@link xodosActivity.onDestroy()} to always complete,
        // we unset clients here as well if it failed, so that we do not leave service and session
        // clients with references to the activity.
        if (mxodosTerminalSessionActivityClient != null)
            unsetxodosTerminalSessionClient();
        return false;
    }

    /** Make service run in foreground mode. */
    private void runStartForeground() {
        setupNotificationChannel();
        startForeground(xodosConstants.xodos_APP_NOTIFICATION_ID, buildNotification());
    }

    /** Make service leave foreground mode. */
    private void runStopForeground() {
        stopForeground(true);
    }

    /** Request to stop service. */
    private void requestStopService() {
        Logger.logDebug(LOG_TAG, "Requesting to stop service");
        runStopForeground();
        stopSelf();
    }

    /** Process action to stop service. */
    private void actionStopService() {
        mWantsToStop = true;
        killAllxodosExecutionCommands();
        requestStopService();
    }

    /** Kill all xodosSessions and xodosTasks by sending SIGKILL to their processes.
     *
     * For xodosSessions, all sessions will be killed, whether user manually exited xodos or if
     * onDestroy() was directly called because of unintended shutdown. The processing of results
     * will only be done if user manually exited xodos or if the session was started by a plugin
     * which **expects** the result back via a pending intent.
     *
     * For xodosTasks, only tasks that were started by a plugin which **expects** the result
     * back via a pending intent will be killed, whether user manually exited xodos or if
     * onDestroy() was directly called because of unintended shutdown. The processing of results
     * will always be done for the tasks that are killed. The remaining processes will keep on
     * running until the xodos app process is killed by android, like by OOM, so we let them run
     * as long as they can.
     *
     * Some plugin execution commands may not have been processed and added to mxodosSessions and
     * mxodosTasks lists before the service is killed, so we maintain a separate
     * mPendingPluginExecutionCommands list for those, so that we can notify the pending intent
     * creators that execution was cancelled.
     *
     * Note that if user didn't manually exit xodos and if onDestroy() was directly called because
     * of unintended shutdown, like android deciding to kill the service, then there will be no
     * guarantee that onDestroy() will be allowed to finish and xodos app process may be killed before
     * it has finished. This means that in those cases some results may not be sent back to their
     * creators for plugin commands but we still try to process whatever results can be processed
     * despite the unreliable behaviour of onDestroy().
     *
     * Note that if don't kill the processes started by plugins which **expect** the result back
     * and notify their creators that they have been killed, then they may get stuck waiting for
     * the results forever like in case of commands started by xodos:Tasker or RUN_COMMAND intent,
     * since once xodosService has been killed, no result will be sent back. They may still get
     * stuck if xodos app process gets killed, so for this case reasonable timeout values should
     * be used, like in Tasker for the xodos:Tasker actions.
     *
     * We make copies of each list since items are removed inside the loop.
     */
    private synchronized void killAllxodosExecutionCommands() {
        boolean processResult;

        Logger.logDebug(LOG_TAG, "Killing xodosSessions=" + mShellManager.mxodosSessions.size() +
            ", xodosTasks=" + mShellManager.mxodosTasks.size() +
            ", PendingPluginExecutionCommands=" + mShellManager.mPendingPluginExecutionCommands.size());

        List<xodosSession> xodosSessions = new ArrayList<>(mShellManager.mxodosSessions);
        List<AppShell> xodosTasks = new ArrayList<>(mShellManager.mxodosTasks);
        List<ExecutionCommand> pendingPluginExecutionCommands = new ArrayList<>(mShellManager.mPendingPluginExecutionCommands);

        for (int i = 0; i < xodosSessions.size(); i++) {
            ExecutionCommand executionCommand = xodosSessions.get(i).getExecutionCommand();
            processResult = mWantsToStop || executionCommand.isPluginExecutionCommandWithPendingResult();
            xodosSessions.get(i).killIfExecuting(this, processResult);
            if (!processResult)
                mShellManager.mxodosSessions.remove(xodosSessions.get(i));
        }


        for (int i = 0; i < xodosTasks.size(); i++) {
            ExecutionCommand executionCommand = xodosTasks.get(i).getExecutionCommand();
            if (executionCommand.isPluginExecutionCommandWithPendingResult())
                xodosTasks.get(i).killIfExecuting(this, true);
            else
                mShellManager.mxodosTasks.remove(xodosTasks.get(i));
        }

        for (int i = 0; i < pendingPluginExecutionCommands.size(); i++) {
            ExecutionCommand executionCommand = pendingPluginExecutionCommands.get(i);
            if (!executionCommand.shouldNotProcessResults() && executionCommand.isPluginExecutionCommandWithPendingResult()) {
                if (executionCommand.setStateFailed(Errno.ERRNO_CANCELLED.getCode(), this.getString(com.xodos.shared.R.string.error_execution_cancelled))) {
                    xodosPluginUtils.processPluginExecutionCommandResult(this, LOG_TAG, executionCommand);
                }
            }
        }
    }



    /** Process action to acquire Power and Wi-Fi WakeLocks. */
    @SuppressLint({"WakelockTimeout", "BatteryLife"})
    private void actionAcquireWakeLock() {
        if (mWakeLock != null) {
            Logger.logDebug(LOG_TAG, "Ignoring acquiring WakeLocks since they are already held");
            return;
        }

        Logger.logDebug(LOG_TAG, "Acquiring WakeLocks");

        PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, xodosConstants.xodos_APP_NAME.toLowerCase() + ":service-wakelock");
        mWakeLock.acquire();

        // http://tools.android.com/tech-docs/lint-in-studio-2-3#TOC-WifiManager-Leak
        WifiManager wm = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        mWifiLock = wm.createWifiLock(WifiManager.WIFI_MODE_FULL_HIGH_PERF, xodosConstants.xodos_APP_NAME.toLowerCase());
        mWifiLock.acquire();

        if (!PermissionUtils.checkIfBatteryOptimizationsDisabled(this)) {
            PermissionUtils.requestDisableBatteryOptimizations(this);
        }

        updateNotification();

        Logger.logDebug(LOG_TAG, "WakeLocks acquired successfully");

    }

    /** Process action to release Power and Wi-Fi WakeLocks. */
    private void actionReleaseWakeLock(boolean updateNotification) {
        if (mWakeLock == null && mWifiLock == null) {
            Logger.logDebug(LOG_TAG, "Ignoring releasing WakeLocks since none are already held");
            return;
        }

        Logger.logDebug(LOG_TAG, "Releasing WakeLocks");

        if (mWakeLock != null) {
            mWakeLock.release();
            mWakeLock = null;
        }

        if (mWifiLock != null) {
            mWifiLock.release();
            mWifiLock = null;
        }

        if (updateNotification)
            updateNotification();

        Logger.logDebug(LOG_TAG, "WakeLocks released successfully");
    }

    /** Process {@link xodos_SERVICE#ACTION_SERVICE_EXECUTE} intent to execute a shell command in
     * a foreground xodosSession or in a background xodosTask. */
    private void actionServiceExecute(Intent intent) {
        if (intent == null) {
            Logger.logError(LOG_TAG, "Ignoring null intent to actionServiceExecute");
            return;
        }

        ExecutionCommand executionCommand = new ExecutionCommand(xodosShellManager.getNextShellId());

        executionCommand.executableUri = intent.getData();
        executionCommand.isPluginExecutionCommand = true;

        // If EXTRA_RUNNER is passed, use that, otherwise check EXTRA_BACKGROUND and default to Runner.TERMINAL_SESSION
        executionCommand.runner = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_RUNNER,
            (intent.getBooleanExtra(xodos_SERVICE.EXTRA_BACKGROUND, false) ? Runner.APP_SHELL.getName() : Runner.TERMINAL_SESSION.getName()));
        if (Runner.runnerOf(executionCommand.runner) == null) {
            String errmsg = this.getString(R.string.error_xodos_service_invalid_execution_command_runner, executionCommand.runner);
            executionCommand.setStateFailed(Errno.ERRNO_FAILED.getCode(), errmsg);
            xodosPluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);
            return;
        }

        if (executionCommand.executableUri != null) {
            Logger.logVerbose(LOG_TAG, "uri: \"" + executionCommand.executableUri + "\", path: \"" + executionCommand.executableUri.getPath() + "\", fragment: \"" + executionCommand.executableUri.getFragment() + "\"");

            // Get full path including fragment (anything after last "#")
            executionCommand.executable = UriUtils.getUriFilePathWithFragment(executionCommand.executableUri);
            executionCommand.arguments = IntentUtils.getStringArrayExtraIfSet(intent, xodos_SERVICE.EXTRA_ARGUMENTS, null);
            if (executionCommand.arguments==null){
                executionCommand.arguments = IntentUtils.getStringListExtraIfSet(intent,xodos_SERVICE.EXTRA_ARGUMENTS,null);
            }
            if (Runner.APP_SHELL.equalsRunner(executionCommand.runner))
                executionCommand.stdin = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_STDIN, null);
            executionCommand.backgroundCustomLogLevel = IntentUtils.getIntegerExtraIfSet(intent, xodos_SERVICE.EXTRA_BACKGROUND_CUSTOM_LOG_LEVEL, null);
        }

        executionCommand.workingDirectory = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_WORKDIR, null);
        executionCommand.isFailsafe = intent.getBooleanExtra(xodos_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);
        executionCommand.sessionAction = intent.getStringExtra(xodos_SERVICE.EXTRA_SESSION_ACTION);
        executionCommand.shellName = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_SHELL_NAME, null);
        executionCommand.shellCreateMode = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_SHELL_CREATE_MODE, null);
        executionCommand.commandLabel = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_COMMAND_LABEL, "Execution Intent Command");
        executionCommand.commandDescription = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_COMMAND_DESCRIPTION, null);
        executionCommand.commandHelp = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_COMMAND_HELP, null);
        executionCommand.pluginAPIHelp = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_PLUGIN_API_HELP, null);
        executionCommand.resultConfig.resultPendingIntent = intent.getParcelableExtra(xodos_SERVICE.EXTRA_PENDING_INTENT);
        executionCommand.resultConfig.resultDirectoryPath = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_RESULT_DIRECTORY, null);
        if (executionCommand.resultConfig.resultDirectoryPath != null) {
            executionCommand.resultConfig.resultSingleFile = intent.getBooleanExtra(xodos_SERVICE.EXTRA_RESULT_SINGLE_FILE, false);
            executionCommand.resultConfig.resultFileBasename = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_RESULT_FILE_BASENAME, null);
            executionCommand.resultConfig.resultFileOutputFormat = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_RESULT_FILE_OUTPUT_FORMAT, null);
            executionCommand.resultConfig.resultFileErrorFormat = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_RESULT_FILE_ERROR_FORMAT, null);
            executionCommand.resultConfig.resultFilesSuffix = IntentUtils.getStringExtraIfSet(intent, xodos_SERVICE.EXTRA_RESULT_FILES_SUFFIX, null);
        }

        if (executionCommand.shellCreateMode == null)
            executionCommand.shellCreateMode = ShellCreateMode.ALWAYS.getMode();

        // Add the execution command to pending plugin execution commands list
        mShellManager.mPendingPluginExecutionCommands.add(executionCommand);

        if (Runner.APP_SHELL.equalsRunner(executionCommand.runner))
            executexodosTaskCommand(executionCommand);
        else if (Runner.TERMINAL_SESSION.equalsRunner(executionCommand.runner))
            executexodosSessionCommand(executionCommand);
        else {
            String errmsg = getString(R.string.error_xodos_service_unsupported_execution_command_runner, executionCommand.runner);
            executionCommand.setStateFailed(Errno.ERRNO_FAILED.getCode(), errmsg);
            xodosPluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);
        }
    }





    /** Execute a shell command in background xodosTask. */
    private void executexodosTaskCommand(ExecutionCommand executionCommand) {
        if (executionCommand == null) return;

        Logger.logDebug(LOG_TAG, "Executing background \"" + executionCommand.getCommandIdAndLabelLogString() + "\" xodosTask command");

        // Transform executable path to shell/session name, e.g. "/bin/do-something.sh" => "do-something.sh".
        if (executionCommand.shellName == null && executionCommand.executable != null)
            executionCommand.shellName = ShellUtils.getExecutableBasename(executionCommand.executable);

        AppShell newxodosTask = null;
        ShellCreateMode shellCreateMode = processShellCreateMode(executionCommand);
        if (shellCreateMode == null) return;
        if (ShellCreateMode.NO_SHELL_WITH_NAME.equals(shellCreateMode)) {
            newxodosTask = getxodosTaskForShellName(executionCommand.shellName);
            if (newxodosTask != null)
                Logger.logVerbose(LOG_TAG, "Existing xodosTask with \"" + executionCommand.shellName + "\" shell name found for shell create mode \"" + shellCreateMode.getMode() + "\"");
            else
                Logger.logVerbose(LOG_TAG, "No existing xodosTask with \"" + executionCommand.shellName + "\" shell name found for shell create mode \"" + shellCreateMode.getMode() + "\"");
        }

        if (newxodosTask == null)
            newxodosTask = createxodosTask(executionCommand);
    }

    /** Create a xodosTask. */
    @Nullable
    public AppShell createxodosTask(String executablePath, String[] arguments, String stdin, String workingDirectory) {
        return createxodosTask(new ExecutionCommand(xodosShellManager.getNextShellId(), executablePath,
            arguments, stdin, workingDirectory, Runner.APP_SHELL.getName(), false));
    }

    /** Create a xodosTask. */
    @Nullable
    public synchronized AppShell createxodosTask(ExecutionCommand executionCommand) {
        if (executionCommand == null) return null;

        Logger.logDebug(LOG_TAG, "Creating \"" + executionCommand.getCommandIdAndLabelLogString() + "\" xodosTask");

        if (!Runner.APP_SHELL.equalsRunner(executionCommand.runner)) {
            Logger.logDebug(LOG_TAG, "Ignoring wrong runner \"" + executionCommand.runner + "\" command passed to createxodosTask()");
            return null;
        }

        executionCommand.setShellCommandShellEnvironment = true;

        if (Logger.getLogLevel() >= Logger.LOG_LEVEL_VERBOSE)
            Logger.logVerboseExtended(LOG_TAG, executionCommand.toString());

        AppShell newxodosTask = AppShell.execute(this, executionCommand, this,
            new xodosShellEnvironment(), null,false);
        if (newxodosTask == null) {
            Logger.logError(LOG_TAG, "Failed to execute new xodosTask command for:\n" + executionCommand.getCommandIdAndLabelLogString());
            // If the execution command was started for a plugin, then process the error
            if (executionCommand.isPluginExecutionCommand)
                xodosPluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);
            else {
                Logger.logError(LOG_TAG, "Set log level to debug or higher to see error in logs");
                Logger.logErrorPrivateExtended(LOG_TAG, executionCommand.toString());
            }
            return null;
        }

        mShellManager.mxodosTasks.add(newxodosTask);

        // Remove the execution command from the pending plugin execution commands list since it has
        // now been processed
        if (executionCommand.isPluginExecutionCommand)
            mShellManager.mPendingPluginExecutionCommands.remove(executionCommand);

        updateNotification();

        return newxodosTask;
    }

    /** Callback received when a xodosTask finishes. */
    @Override
    public void onAppShellExited(final AppShell xodosTask) {
        mHandler.post(() -> {
            if (xodosTask != null) {
                ExecutionCommand executionCommand = xodosTask.getExecutionCommand();

                Logger.logVerbose(LOG_TAG, "The onxodosTaskExited() callback called for \"" + executionCommand.getCommandIdAndLabelLogString() + "\" xodosTask command");

                // If the execution command was started for a plugin, then process the results
                if (executionCommand != null && executionCommand.isPluginExecutionCommand)
                    xodosPluginUtils.processPluginExecutionCommandResult(this, LOG_TAG, executionCommand);

                mShellManager.mxodosTasks.remove(xodosTask);
            }

            updateNotification();
        });
    }





    /** Execute a shell command in a foreground {@link xodosSession}. */
    private void executexodosSessionCommand(ExecutionCommand executionCommand) {
        if (executionCommand == null) return;

        Logger.logDebug(LOG_TAG, "Executing foreground \"" + executionCommand.getCommandIdAndLabelLogString() + "\" xodosSession command");

        // Transform executable path to shell/session name, e.g. "/bin/do-something.sh" => "do-something.sh".
        if (executionCommand.shellName == null && executionCommand.executable != null)
            executionCommand.shellName = ShellUtils.getExecutableBasename(executionCommand.executable);

        xodosSession newxodosSession = null;
        ShellCreateMode shellCreateMode = processShellCreateMode(executionCommand);
        if (shellCreateMode == null) return;
        if (ShellCreateMode.NO_SHELL_WITH_NAME.equals(shellCreateMode)) {
            newxodosSession = getxodosSessionForShellName(executionCommand.shellName);
            if (newxodosSession != null)
                Logger.logVerbose(LOG_TAG, "Existing xodosSession with \"" + executionCommand.shellName + "\" shell name found for shell create mode \"" + shellCreateMode.getMode() + "\"");
            else
                Logger.logVerbose(LOG_TAG, "No existing xodosSession with \"" + executionCommand.shellName + "\" shell name found for shell create mode \"" + shellCreateMode.getMode() + "\"");
        }

        if (newxodosSession == null)
            newxodosSession = createxodosSession(executionCommand);
        if (newxodosSession == null) return;

        handleSessionAction(DataUtils.getIntFromString(executionCommand.sessionAction,
            xodos_SERVICE.VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_OPEN_ACTIVITY),
            newxodosSession.getTerminalSession());
    }

    /**
     * Create a {@link xodosSession}.
     * Currently called by {@link xodosTerminalSessionActivityClient#addNewSession(boolean, String)} to add a new {@link xodosSession}.
     */
    @Nullable
    public xodosSession createxodosSession(String executablePath, String[] arguments, String stdin,
                                             String workingDirectory, boolean isFailSafe, String sessionName) {
        ExecutionCommand executionCommand = new ExecutionCommand(xodosShellManager.getNextShellId(),
            executablePath, arguments, stdin, workingDirectory, Runner.TERMINAL_SESSION.getName(), isFailSafe);
        executionCommand.shellName = sessionName;
        return createxodosSession(executionCommand);
    }

    /** Create a {@link xodosSession}. */
    @Nullable
    public synchronized xodosSession createxodosSession(ExecutionCommand executionCommand) {
        if (executionCommand == null) return null;

        Logger.logDebug(LOG_TAG, "Creating \"" + executionCommand.getCommandIdAndLabelLogString() + "\" xodosSession");

        if (!Runner.TERMINAL_SESSION.equalsRunner(executionCommand.runner)) {
            Logger.logDebug(LOG_TAG, "Ignoring wrong runner \"" + executionCommand.runner + "\" command passed to createxodosSession()");
            return null;
        }

        executionCommand.setShellCommandShellEnvironment = true;
        executionCommand.terminalTranscriptRows = mProperties.getTerminalTranscriptRows();

        if (Logger.getLogLevel() >= Logger.LOG_LEVEL_VERBOSE)
            Logger.logVerboseExtended(LOG_TAG, executionCommand.toString());

        // If the execution command was started for a plugin, only then will the stdout be set
        // Otherwise if command was manually started by the user like by adding a new terminal session,
        // then no need to set stdout
        xodosSession newxodosSession = xodosSession.execute(this, executionCommand, getxodosTerminalSessionClient(),
            this, new xodosShellEnvironment(), null, executionCommand.isPluginExecutionCommand);
        if (newxodosSession == null) {
            Logger.logError(LOG_TAG, "Failed to execute new xodosSession command for:\n" + executionCommand.getCommandIdAndLabelLogString());
            // If the execution command was started for a plugin, then process the error
            if (executionCommand.isPluginExecutionCommand)
                xodosPluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);
            else {
                Logger.logError(LOG_TAG, "Set log level to debug or higher to see error in logs");
                Logger.logErrorPrivateExtended(LOG_TAG, executionCommand.toString());
            }
            return null;
        }

        mShellManager.mxodosSessions.add(newxodosSession);

        // Remove the execution command from the pending plugin execution commands list since it has
        // now been processed
        if (executionCommand.isPluginExecutionCommand)
            mShellManager.mPendingPluginExecutionCommands.remove(executionCommand);

        // Notify {@link xodosSessionsListViewController} that sessions list has been updated if
        // activity in is foreground
        if (mxodosTerminalSessionActivityClient != null)
            mxodosTerminalSessionActivityClient.xodosSessionListNotifyUpdated();

        updateNotification();

        // No need to recreate the activity since it likely just started and theme should already have applied
        xodosActivity.updatexodosActivityStyling(this, false);

        return newxodosSession;
    }

    /** Remove a xodosSession. */
    public synchronized int removexodosSession(TerminalSession sessionToRemove) {
        int index = getIndexOfSession(sessionToRemove);

        if (index >= 0)
            mShellManager.mxodosSessions.get(index).finish();

        return index;
    }

    /** Callback received when a {@link xodosSession} finishes. */
    @Override
    public void onxodosSessionExited(final xodosSession xodosSession) {
        if (xodosSession != null) {
            ExecutionCommand executionCommand = xodosSession.getExecutionCommand();

            Logger.logVerbose(LOG_TAG, "The onxodosSessionExited() callback called for \"" + executionCommand.getCommandIdAndLabelLogString() + "\" xodosSession command");

            // If the execution command was started for a plugin, then process the results
            if (executionCommand != null && executionCommand.isPluginExecutionCommand)
                xodosPluginUtils.processPluginExecutionCommandResult(this, LOG_TAG, executionCommand);

            mShellManager.mxodosSessions.remove(xodosSession);

            // Notify {@link xodosSessionsListViewController} that sessions list has been updated if
            // activity in is foreground
            if (mxodosTerminalSessionActivityClient != null)
                mxodosTerminalSessionActivityClient.xodosSessionListNotifyUpdated();
        }

        updateNotification();
    }





    private ShellCreateMode processShellCreateMode(@NonNull ExecutionCommand executionCommand) {
        if (ShellCreateMode.ALWAYS.equalsMode(executionCommand.shellCreateMode))
            return ShellCreateMode.ALWAYS; // Default
        else if (ShellCreateMode.NO_SHELL_WITH_NAME.equalsMode(executionCommand.shellCreateMode))
            if (DataUtils.isNullOrEmpty(executionCommand.shellName)) {
                xodosPluginUtils.setAndProcessPluginExecutionCommandError(this, LOG_TAG, executionCommand, false,
                    getString(R.string.error_xodos_service_execution_command_shell_name_unset, executionCommand.shellCreateMode));
                return null;
            } else {
               return ShellCreateMode.NO_SHELL_WITH_NAME;
            }
        else {
            xodosPluginUtils.setAndProcessPluginExecutionCommandError(this, LOG_TAG, executionCommand, false,
                getString(R.string.error_xodos_service_unsupported_execution_command_shell_create_mode, executionCommand.shellCreateMode));
            return null;
        }
    }

    /** Process session action for new session. */
    private void handleSessionAction(int sessionAction, TerminalSession newTerminalSession) {
        Logger.logDebug(LOG_TAG, "Processing sessionAction \"" + sessionAction + "\" for session \"" + newTerminalSession.mSessionName + "\"");

        switch (sessionAction) {
            case xodos_SERVICE.VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_OPEN_ACTIVITY:
                setCurrentStoredTerminalSession(newTerminalSession);
                if (mxodosTerminalSessionActivityClient != null)
                    mxodosTerminalSessionActivityClient.setCurrentSession(newTerminalSession);
                startxodosActivity();
                break;
            case xodos_SERVICE.VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_OPEN_ACTIVITY:
                if (getxodosSessionsSize() == 1)
                    setCurrentStoredTerminalSession(newTerminalSession);
                startxodosActivity();
                break;
            case xodos_SERVICE.VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_DONT_OPEN_ACTIVITY:
                setCurrentStoredTerminalSession(newTerminalSession);
                if (mxodosTerminalSessionActivityClient != null)
                    mxodosTerminalSessionActivityClient.setCurrentSession(newTerminalSession);
                break;
            case xodos_SERVICE.VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY:
                if (getxodosSessionsSize() == 1)
                    setCurrentStoredTerminalSession(newTerminalSession);
                break;
            default:
                Logger.logError(LOG_TAG, "Invalid sessionAction: \"" + sessionAction + "\". Force using default sessionAction.");
                handleSessionAction(xodos_SERVICE.VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_OPEN_ACTIVITY, newTerminalSession);
                break;
        }
    }

    /** Launch the {@link }xodosActivity} to bring it to foreground. */
    private void startxodosActivity() {
        // For android >= 10, apps require Display over other apps permission to start foreground activities
        // from background (services). If it is not granted, then xodosSessions that are started will
        // show in xodos notification but will not run until user manually clicks the notification.
        if (PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(this, true)) {
            xodosActivity.startxodosActivity(this);
        } else {
            xodosAppSharedPreferences preferences = xodosAppSharedPreferences.build(this);
            if (preferences == null) return;
            if (preferences.arePluginErrorNotificationsEnabled(false))
                Logger.showToast(this, this.getString(R.string.error_display_over_other_apps_permission_not_granted_to_start_terminal), true);
        }
    }





    /** If {@link xodosActivity} has not bound to the {@link xodosService} yet or is destroyed, then
     * interface functions requiring the activity should not be available to the terminal sessions,
     * so we just return the {@link #mxodosTerminalSessionServiceClient}. Once {@link xodosActivity} bind
     * callback is received, it should call {@link #setxodosTerminalSessionClient} to set the
     * {@link xodosService#mxodosTerminalSessionActivityClient} so that further terminal sessions are directly
     * passed the {@link xodosTerminalSessionActivityClient} object which fully implements the
     * {@link TerminalSessionClient} interface.
     *
     * @return Returns the {@link xodosTerminalSessionActivityClient} if {@link xodosActivity} has bound with
     * {@link xodosService}, otherwise {@link xodosTerminalSessionServiceClient}.
     */
    public synchronized xodosTerminalSessionClientBase getxodosTerminalSessionClient() {
        if (mxodosTerminalSessionActivityClient != null)
            return mxodosTerminalSessionActivityClient;
        else
            return mxodosTerminalSessionServiceClient;
    }

    /** This should be called when {@link xodosActivity#onServiceConnected} is called to set the
     * {@link xodosService#mxodosTerminalSessionActivityClient} variable and update the {@link TerminalSession}
     * and {@link TerminalEmulator} clients in case they were passed {@link xodosTerminalSessionServiceClient}
     * earlier.
     *
     * @param xodosTerminalSessionActivityClient The {@link xodosTerminalSessionActivityClient} object that fully
     * implements the {@link TerminalSessionClient} interface.
     */
    public synchronized void setxodosTerminalSessionClient(xodosTerminalSessionActivityClient xodosTerminalSessionActivityClient) {
        mxodosTerminalSessionActivityClient = xodosTerminalSessionActivityClient;

        for (int i = 0; i < mShellManager.mxodosSessions.size(); i++)
            mShellManager.mxodosSessions.get(i).getTerminalSession().updateTerminalSessionClient(mxodosTerminalSessionActivityClient);
    }

    /** This should be called when {@link xodosActivity} has been destroyed and in {@link #onUnbind(Intent)}
     * so that the {@link xodosService} and {@link TerminalSession} and {@link TerminalEmulator}
     * clients do not hold an activity references.
     */
    public synchronized void unsetxodosTerminalSessionClient() {
        for (int i = 0; i < mShellManager.mxodosSessions.size(); i++)
            mShellManager.mxodosSessions.get(i).getTerminalSession().updateTerminalSessionClient(mxodosTerminalSessionServiceClient);

        mxodosTerminalSessionActivityClient = null;
    }





    private Notification buildNotification() {
        Resources res = getResources();

        // Set pending intent to be launched when notification is clicked
        Intent notificationIntent = xodosActivity.newInstance(this);
        

// Before:
//PendingIntent contentIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);

// After:
int flags = PendingIntent.FLAG_IMMUTABLE;
if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
    flags = 0;
}
PendingIntent contentIntent = PendingIntent.getActivity(this, 0, notificationIntent, flags);
        // Set notification text
        int sessionCount = getxodosSessionsSize();
        int taskCount = mShellManager.mxodosTasks.size();
        String notificationText = sessionCount + " session" + (sessionCount == 1 ? "" : "s");
        if (taskCount > 0) {
            notificationText += ", " + taskCount + " task" + (taskCount == 1 ? "" : "s");
        }

        final boolean wakeLockHeld = mWakeLock != null;
        if (wakeLockHeld) notificationText += " (wake lock held)";


        // Set notification priority
        // If holding a wake or wifi lock consider the notification of high priority since it's using power,
        // otherwise use a low priority
        int priority = (wakeLockHeld) ? Notification.PRIORITY_HIGH : Notification.PRIORITY_LOW;


        //
    // Build the notification
    Notification.Builder builder =  NotificationUtils.geNotificationBuilder(this,
        xodosConstants.xodos_APP_NOTIFICATION_CHANNEL_ID, priority,
        "XoDos", notificationText, null, // Changed the notification name here
        contentIntent, null, NotificationUtils.NOTIFICATION_MODE_SILENT);
    if (builder == null)  return null;

        // No need to show a timestamp:
        builder.setShowWhen(false);

        // Set notification icon
        builder.setSmallIcon(R.drawable.ic_service_notification);

        // Set background color for small notification icon
        builder.setColor(0xFF607D8B);

        // xodosSessions are always ongoing
        builder.setOngoing(true);


        // Set Exit button action
        Intent exitIntent = new Intent(this, xodosService.class).setAction(xodos_SERVICE.ACTION_STOP_SERVICE);
  //      builder.addAction(android.R.drawable.ic_delete, res.getString(R.string.notification_action_exit), PendingIntent.getService(this, 0, exitIntent, 0));

// After:
builder.addAction(android.R.drawable.ic_delete, res.getString(R.string.notification_action_exit), 
    PendingIntent.getService(this, 0, exitIntent, flags));
        // Set Wakelock button actions
        String newWakeAction = wakeLockHeld ? xodos_SERVICE.ACTION_WAKE_UNLOCK : xodos_SERVICE.ACTION_WAKE_LOCK;
        Intent toggleWakeLockIntent = new Intent(this, xodosService.class).setAction(newWakeAction);
        String actionTitle = res.getString(wakeLockHeld ? R.string.notification_action_wake_unlock : R.string.notification_action_wake_lock);
        int actionIcon = wakeLockHeld ? android.R.drawable.ic_lock_idle_lock : android.R.drawable.ic_lock_lock;
//        builder.addAction(actionIcon, actionTitle, PendingIntent.getService(this, 0, toggleWakeLockIntent, 0));

// After:
builder.addAction(actionIcon, actionTitle, 
    PendingIntent.getService(this, 0, toggleWakeLockIntent, flags));

        return builder.build();
    }

    private void setupNotificationChannel() {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return;

        NotificationUtils.setupNotificationChannel(this, xodosConstants.xodos_APP_NOTIFICATION_CHANNEL_ID,
            xodosConstants.xodos_APP_NOTIFICATION_CHANNEL_NAME, NotificationManager.IMPORTANCE_LOW);
    }

    /** Update the shown foreground service notification after making any changes that affect it. */
    private synchronized void updateNotification() {
        if (mWakeLock == null && mShellManager.mxodosSessions.isEmpty() && mShellManager.mxodosTasks.isEmpty()) {
            // Exit if we are updating after the user disabled all locks with no sessions or tasks running.
            requestStopService();
        } else {
            ((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).notify(xodosConstants.xodos_APP_NOTIFICATION_ID, buildNotification());
        }
    }





    private void setCurrentStoredTerminalSession(TerminalSession terminalSession) {
        if (terminalSession == null) return;
        // Make the newly created session the current one to be displayed
        xodosAppSharedPreferences preferences = xodosAppSharedPreferences.build(this);
        if (preferences == null) return;
        preferences.setCurrentSession(terminalSession.mHandle);
    }

    public synchronized boolean isxodosSessionsEmpty() {
        return mShellManager.mxodosSessions.isEmpty();
    }

    public synchronized int getxodosSessionsSize() {
        return mShellManager.mxodosSessions.size();
    }

    public synchronized List<xodosSession> getxodosSessions() {
        return mShellManager.mxodosSessions;
    }

    @Nullable
    public synchronized xodosSession getxodosSession(int index) {
        if (index >= 0 && index < mShellManager.mxodosSessions.size())
            return mShellManager.mxodosSessions.get(index);
        else
            return null;
    }

    @Nullable
    public synchronized xodosSession getxodosSessionForTerminalSession(TerminalSession terminalSession) {
        if (terminalSession == null) return null;

        for (int i = 0; i < mShellManager.mxodosSessions.size(); i++) {
            if (mShellManager.mxodosSessions.get(i).getTerminalSession().equals(terminalSession))
                return mShellManager.mxodosSessions.get(i);
        }

        return null;
    }

    public synchronized xodosSession getLastxodosSession() {
        return mShellManager.mxodosSessions.isEmpty() ? null : mShellManager.mxodosSessions.get(mShellManager.mxodosSessions.size() - 1);
    }

    public synchronized int getIndexOfSession(TerminalSession terminalSession) {
        if (terminalSession == null) return -1;

        for (int i = 0; i < mShellManager.mxodosSessions.size(); i++) {
            if (mShellManager.mxodosSessions.get(i).getTerminalSession().equals(terminalSession))
                return i;
        }
        return -1;
    }

    public synchronized TerminalSession getTerminalSessionForHandle(String sessionHandle) {
        TerminalSession terminalSession;
        for (int i = 0, len = mShellManager.mxodosSessions.size(); i < len; i++) {
            terminalSession = mShellManager.mxodosSessions.get(i).getTerminalSession();
            if (terminalSession.mHandle.equals(sessionHandle))
                return terminalSession;
        }
        return null;
    }

    public synchronized AppShell getxodosTaskForShellName(String name) {
        if (DataUtils.isNullOrEmpty(name)) return null;
        AppShell appShell;
        for (int i = 0, len = mShellManager.mxodosTasks.size(); i < len; i++) {
            appShell = mShellManager.mxodosTasks.get(i);
            String shellName = appShell.getExecutionCommand().shellName;
            if (shellName != null && shellName.equals(name))
                return appShell;
        }
        return null;
    }

    public synchronized xodosSession getxodosSessionForShellName(String name) {
        if (DataUtils.isNullOrEmpty(name)) return null;
        xodosSession xodosSession;
        for (int i = 0, len = mShellManager.mxodosSessions.size(); i < len; i++) {
            xodosSession = mShellManager.mxodosSessions.get(i);
            String shellName = xodosSession.getExecutionCommand().shellName;
            if (shellName != null && shellName.equals(name))
                return xodosSession;
        }
        return null;
    }



    public boolean wantsToStop() {
        return mWantsToStop;
    }

}
