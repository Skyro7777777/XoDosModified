package com.xodos.app;
import java.io.IOException;
 import android.app.ProgressDialog;
import android.os.Handler;     
import android.os.Looper; 
import android.content.res.AssetManager; 
import java.io.InputStream;      
import java.io.FileOutputStream;  
import java.io.BufferedReader;
import java.io.InputStreamReader; 
import java.util.Map;
import android.content.res.AssetFileDescriptor;  // For accurate file size
import java.io.InputStream;                     // For reading assets
import java.io.OutputStream;             
import java.util.Stack; //

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.os.Build;
import android.os.Environment;
import android.system.Os;
import android.util.Pair;
import android.view.WindowManager;

import com.xodos.R;
import com.xodos.shared.file.FileUtils;
import com.xodos.shared.xodos.crash.xodosCrashUtils;
import com.xodos.shared.xodos.file.xodosFileUtils;
import com.xodos.shared.interact.MessageDialogUtils;
import com.xodos.shared.logger.Logger;
import com.xodos.shared.markdown.MarkdownUtils;
import com.xodos.shared.errors.Error;
import com.xodos.shared.android.PackageUtils;
import com.xodos.shared.xodos.xodosConstants;
import com.xodos.shared.xodos.xodosUtils;
import com.xodos.shared.xodos.shell.command.environment.xodosShellEnvironment;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import static com.xodos.shared.xodos.xodosConstants.xodos_PREFIX_DIR;
import static com.xodos.shared.xodos.xodosConstants.xodos_PREFIX_DIR_PATH;
import static com.xodos.shared.xodos.xodosConstants.xodos_STAGING_PREFIX_DIR;
import static com.xodos.shared.xodos.xodosConstants.xodos_STAGING_PREFIX_DIR_PATH;

/**
 * Install the xodos bootstrap packages if necessary by following the below steps:
 * <p/>
 * (1) If $PREFIX already exist, assume that it is correct and be done. Note that this relies on that we do not create a
 * broken $PREFIX directory below.
 * <p/>
 * (2) A progress dialog is shown with "Installing..." message and a spinner.
 * <p/>
 * (3) A staging directory, $STAGING_PREFIX, is cleared if left over from broken installation below.
 * <p/>
 * (4) The zip file is loaded from a shared library.
 * <p/>
 * (5) The zip, containing entries relative to the $PREFIX, is is downloaded and extracted by a zip input stream
 * continuously encountering zip file entries:
 * <p/>
 * (5.1) If the zip entry encountered is SYMLINKS.txt, go through it and remember all symlinks to setup.
 * <p/>
 * (5.2) For every other zip entry, extract it into $STAGING_PREFIX and set execute permissions if necessary.
 */
final class xodosInstaller {

    private static final String LOG_TAG = "xodosInstaller";

    /** Performs bootstrap setup if necessary. */
    static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenDone) {
        String bootstrapErrorMessage;
        Error filesDirectoryAccessibleError;

        // This will also call Context.getFilesDir(), which should ensure that xodos files directory
        // is created if it does not already exist
        filesDirectoryAccessibleError = xodosFileUtils.isxodosFilesDirectoryAccessible(activity, true, true);
        boolean isFilesDirectoryAccessible = filesDirectoryAccessibleError == null;

        // xodos can only be run as the primary user (device owner) since only that
        // account has the expected file system paths. Verify that:
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && !PackageUtils.isCurrentUserThePrimaryUser(activity)) {
            bootstrapErrorMessage = activity.getString(R.string.bootstrap_error_not_primary_user_message,
                MarkdownUtils.getMarkdownCodeForString(xodos_PREFIX_DIR_PATH, false));
            Logger.logError(LOG_TAG, "isFilesDirectoryAccessible: " + isFilesDirectoryAccessible);
            Logger.logError(LOG_TAG, bootstrapErrorMessage);
            sendBootstrapCrashReportNotification(activity, bootstrapErrorMessage);
            MessageDialogUtils.exitAppWithErrorMessage(activity,
                activity.getString(R.string.bootstrap_error_title),
                bootstrapErrorMessage);
            return;
        }

        if (!isFilesDirectoryAccessible) {
            bootstrapErrorMessage = Error.getMinimalErrorString(filesDirectoryAccessibleError);
            //noinspection SdCardPath
            if (PackageUtils.isAppInstalledOnExternalStorage(activity) &&
                !xodosConstants.xodos_FILES_DIR_PATH.equals(activity.getFilesDir().getAbsolutePath().replaceAll("^/data/user/0/", "/data/data/"))) {
                bootstrapErrorMessage += "\n\n" + activity.getString(R.string.bootstrap_error_installed_on_portable_sd,
                    MarkdownUtils.getMarkdownCodeForString(xodos_PREFIX_DIR_PATH, false));
            }

            Logger.logError(LOG_TAG, bootstrapErrorMessage);
            sendBootstrapCrashReportNotification(activity, bootstrapErrorMessage);
            MessageDialogUtils.showMessage(activity,
                activity.getString(R.string.bootstrap_error_title),
                bootstrapErrorMessage, null);
            return;
        }

        // If prefix directory exists, even if its a symlink to a valid directory and symlink is not broken/dangling
        if (FileUtils.directoryFileExists(xodos_PREFIX_DIR_PATH, true)) {
            if (xodosFileUtils.isxodosPrefixDirectoryEmpty()) {
                Logger.logInfo(LOG_TAG, "The xodos prefix directory \"" + xodos_PREFIX_DIR_PATH + "\" exists but is empty or only contains specific unimportant files.");
            } else {
                whenDone.run();
                return;
            }
        } else if (FileUtils.fileExists(xodos_PREFIX_DIR_PATH, false)) {
            Logger.logInfo(LOG_TAG, "The xodos prefix directory \"" + xodos_PREFIX_DIR_PATH + "\" does not exist but another file exists at its destination.");
        }

        final ProgressDialog progress = ProgressDialog.show(activity, null, activity.getString(R.string.bootstrap_installer_body), true, false);
        
     // Inside the setupBootstrapIfNeeded method:

// After the existing bootstrap progress dialog:
final ProgressDialog extractionProgressDialog = new ProgressDialog(activity);
extractionProgressDialog.setTitle("installing XoDos system");
extractionProgressDialog.setMessage("please wait for XoDos first Install ...");
extractionProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
extractionProgressDialog.setMax(100); // 0-100%
extractionProgressDialog.setCancelable(false);
extractionProgressDialog.show();
   
        new Thread() {
            @Override
            public void run() {
                try {
                    Logger.logInfo(LOG_TAG, "Installing " + xodosConstants.xodos_APP_NAME + " bootstrap packages.");

                    Error error;

                    // Delete prefix staging directory or any file at its destination
                    error = FileUtils.deleteFile("xodos prefix staging directory", xodos_STAGING_PREFIX_DIR_PATH, true);
                    if (error != null) {
                        showBootstrapErrorDialog(activity, whenDone, Error.getErrorMarkdownString(error));
                        return;
                    }

                    // Delete prefix directory or any file at its destination
                    error = FileUtils.deleteFile("xodos prefix directory", xodos_PREFIX_DIR_PATH, true);
                    if (error != null) {
                        showBootstrapErrorDialog(activity, whenDone, Error.getErrorMarkdownString(error));
                        return;
                    }

                    // Create prefix staging directory if it does not already exist and set required permissions
                    error = xodosFileUtils.isxodosPrefixStagingDirectoryAccessible(true, true);
                    if (error != null) {
                        showBootstrapErrorDialog(activity, whenDone, Error.getErrorMarkdownString(error));
                        return;
                    }

                    // Create prefix directory if it does not already exist and set required permissions
                    error = xodosFileUtils.isxodosPrefixDirectoryAccessible(true, true);
                    if (error != null) {
                        showBootstrapErrorDialog(activity, whenDone, Error.getErrorMarkdownString(error));
                        return;
                    }

                    Logger.logInfo(LOG_TAG, "Extracting bootstrap zip to prefix staging directory \"" + xodos_STAGING_PREFIX_DIR_PATH + "\".");

                    final byte[] buffer = new byte[8096];
                    final List<Pair<String, String>> symlinks = new ArrayList<>(50);

                    final byte[] zipBytes = loadZipBytes();
                    try (ZipInputStream zipInput = new ZipInputStream(new ByteArrayInputStream(zipBytes))) {
                        ZipEntry zipEntry;
                        while ((zipEntry = zipInput.getNextEntry()) != null) {
                            if (zipEntry.getName().equals("SYMLINKS.txt")) {
                                BufferedReader symlinksReader = new BufferedReader(new InputStreamReader(zipInput));
                                String line;
                                while ((line = symlinksReader.readLine()) != null) {
                                    String[] parts = line.split("‚Üê");
                                    if (parts.length != 2)
                                        throw new RuntimeException("Malformed symlink line: " + line);
                                    String oldPath = parts[0];
                                    String newPath = xodos_STAGING_PREFIX_DIR_PATH + "/" + parts[1];
                                    symlinks.add(Pair.create(oldPath, newPath));

                                    error = ensureDirectoryExists(new File(newPath).getParentFile());
                                    if (error != null) {
                                        showBootstrapErrorDialog(activity, whenDone, Error.getErrorMarkdownString(error));
                                        return;
                                    }
                                }
                            } else {
                                String zipEntryName = zipEntry.getName();
                                File targetFile = new File(xodos_STAGING_PREFIX_DIR_PATH, zipEntryName);
                                boolean isDirectory = zipEntry.isDirectory();

                                error = ensureDirectoryExists(isDirectory ? targetFile : targetFile.getParentFile());
                                if (error != null) {
                                    showBootstrapErrorDialog(activity, whenDone, Error.getErrorMarkdownString(error));
                                    return;
                                }

                                if (!isDirectory) {
                                    try (FileOutputStream outStream = new FileOutputStream(targetFile)) {
                                        int readBytes;
                                        while ((readBytes = zipInput.read(buffer)) != -1)
                                            outStream.write(buffer, 0, readBytes);
                                    }
                                    if (zipEntryName.startsWith("bin/") || zipEntryName.startsWith("libexec") ||
                                        zipEntryName.startsWith("lib/apt/apt-helper") || zipEntryName.startsWith("lib/apt/methods")) {
                                        //noinspection OctalInteger
                                        Os.chmod(targetFile.getAbsolutePath(), 0700);
                                    }
                                }
                            }
                        }
                    }

                    if (symlinks.isEmpty())
                        throw new RuntimeException("No SYMLINKS.txt encountered");
                    for (Pair<String, String> symlink : symlinks) {
                        Os.symlink(symlink.first, symlink.second);
                    }

                    Logger.logInfo(LOG_TAG, "Moving xodos prefix staging to prefix directory.");

                    if (!xodos_STAGING_PREFIX_DIR.renameTo(xodos_PREFIX_DIR)) {
                        throw new RuntimeException("Moving xodos prefix staging to prefix directory failed");
                    }

                    Logger.logInfo(LOG_TAG, "Bootstrap packages installed successfully.");



    // Inside the try block after bootstrap installation:
// --------------------------------------------
// --------------------------------------------
// Phase 1: Copy from Assets (50% of progress)
// --------------------------------------------


new Thread(() -> {
    Process process = null;
    File outFile = null;
    File scriptFile = null;

    try {
        // Add folder size check here
        File wallpaperFolder = new File("/data/data/com.xodos/files/home/WALLPAPERS");
        long folderSize = 0;
        long sizeLimit = 5 * 1024 * 1024; // 5 MB
        boolean folderExists = wallpaperFolder.exists() && wallpaperFolder.isDirectory();

        if (folderExists) {
            Stack<File> stack = new Stack<>();
            stack.push(wallpaperFolder);

            outerLoop:
            while (!stack.isEmpty()) {
                File current = stack.pop();
                File[] files = current.listFiles();
                if (files == null) continue;

                for (File file : files) {
                    if (file.isFile()) {
                        folderSize += file.length();
                        if (folderSize > sizeLimit) {
                            break outerLoop;
                        }
                    } else if (file.isDirectory()) {
                        stack.push(file);
                    }
                }
            }
        }
        
   if (folderExists && folderSize > sizeLimit) {
            // Cancel installation and dismiss dialog
            activity.runOnUiThread(() -> {
                extractionProgressDialog.setMessage("already installed! fixing system now,,, if there's issues try update option to Fix ");
                new Handler(Looper.getMainLooper()).postDelayed(() -> {
                   // extractionProgressDialog.dismiss();
                }, 2000);
            });
         //   return; // Exit 
        
        // Determine asset name based on folder check
        String assetName = (folderExists && folderSize > sizeLimit) 
                            ? "xodos0.tar.xz" 
                            : "xodos.tar.xz";

        // Update UI before copying (original code)
        activity.runOnUiThread(() -> extractionProgressDialog.setMessage("Copying XoDos file..."));

        // Copy selected asset (original code with minor change to asset name)
        AssetManager assetManager = activity.getAssets();
        InputStream in = assetManager.open(assetName);  // Changed to use assetName
        outFile = new File(activity.getFilesDir(), assetName);  // Changed to use assetName
        FileOutputStream out = new FileOutputStream(outFile);

        // Get total file size for progress (original code with minor change)
        long totalBytes = assetManager.openFd(assetName).getLength();  // Changed to use assetName
        long copiedBytes = 0;
        byte[] copybuffer = new byte[1024 * 128]; // 16KB buffer

        int bytesRead;
        while ((bytesRead = in.read(copybuffer)) != -1) {
            out.write(copybuffer, 0, bytesRead);
            copiedBytes += bytesRead;

            // Update progress bar (first 50% for copying)
            int progress = (int) ((copiedBytes * 50) / totalBytes);
            activity.runOnUiThread(() -> extractionProgressDialog.setProgress(progress));
        }

        out.close();
        in.close();

        

//////////////////and of checking////########

//long totalRecords = totalBytes / bytesPerRecord;
//int estimatedTotalCheckpoints = (int) (totalRecords / recordsPerCheckpoint);
        
        

        // Copy fix script and make it executable
        InputStream scriptIn = assetManager.open("fix");
        scriptFile = new File(activity.getFilesDir(), "fix");
        FileOutputStream scriptOut = new FileOutputStream(scriptFile);

        while ((bytesRead = scriptIn.read(copybuffer)) != -1) {
            scriptOut.write(copybuffer, 0, bytesRead);
        }

        scriptOut.close();
        scriptIn.close();
        scriptFile.setExecutable(true);

        // UI update before extraction
        activity.runOnUiThread(() -> extractionProgressDialog.setMessage("Installing XoDos system..."));
        Thread.sleep(1500); // Small delay to ensure stability

        // --------------------------------------------
        // Phase 2: Extract with Tar (Second 50% of progress)
        // -------------------------------------------

// Calculate dynamic checkpoint interval for smoother updates
int bytesPerRecord = 512; // Tar's block size
int targetCheckpoints = 250; // Aim for 200 checkpoints (~0.25% per update)

// Calculate records per checkpoint
long totalRecords = (totalBytes + bytesPerRecord - 1) / bytesPerRecord;
int recordsPerCheckpoint = Math.max(1, (int) (totalRecords / targetCheckpoints));

ProcessBuilder processBuilder = new ProcessBuilder(
    "sh", "-c",
    "tar -xf " + outFile.getAbsolutePath() +
    " -C /data/data/com.xodos/files --preserve-permissions " +
    "--warning=no-file-ignored " +  
    "--checkpoint=" + recordsPerCheckpoint + " --checkpoint-action=echo=CHECKPOINT " + // Dynamic checkpoint
    "--totals 2>&1"
);

        // Set environment
        Map<String, String> env = processBuilder.environment();
        env.put("PATH", "/data/data/com.xodos/files/usr/bin:" + System.getenv("PATH"));
        env.put("LD_LIBRARY_PATH", "/data/data/com.xodos/files/usr/lib");

        // Start process
        process = processBuilder.start();

  // Monitor progress from the combined input stream (stdout and stderr)
BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

// Calculate total checkpoints dynamically
//long totalBytes = outFile.length();
// Calculate total expected checkpoints (ceiling division)
int estimatedTotalCheckpoints = (int) Math.ceil((double) totalRecords / recordsPerCheckpoint);

// Track progress
int checkpointCount = 0;
String line;

while ((line = reader.readLine()) != null) {
    if (line.contains("CHECKPOINT")) {
        checkpointCount++;
        
        // Calculate progress with floating-point division
        int progress = 50 + (int) ((checkpointCount * 50.0) / 50);
        progress = Math.min(99, progress); // Cap at 99%
        
        // Create a final copy of progress for the lambda
final int finalProgress = progress;
activity.runOnUiThread(() -> extractionProgressDialog.setProgress(finalProgress));

    } else if (line.startsWith("Total bytes read:")) {
        Logger.logInfo(LOG_TAG, "Tar: " + line);
    }
}

// After extraction completes, force 100% progress
activity.runOnUiThread(() -> 
extractionProgressDialog.setMessage("XoDos installed successfully..."));
activity.runOnUiThread(() -> 
extractionProgressDialog.setProgress(99));
        // Cleanup
        if (!outFile.delete()) {
            Logger.logError(LOG_TAG, "Failed to delete temp file");
        }

        // --------------------------------------------
        // Phase 3: Run fix after extraction
        // --------------------------------------------
        activity.runOnUiThread(() -> extractionProgressDialog.setMessage("Finalizing and fixing installation..."));

        process = new ProcessBuilder("sh", scriptFile.getAbsolutePath()).start();
        int scriptExitCode = process.waitFor();
        if (scriptExitCode != 0) {
            throw new IOException("Fix script failed with code: " + scriptExitCode);
        }
activity.runOnUiThread(() -> 
extractionProgressDialog.setProgress(100));
        // Cleanup
        // UI update
        activity.runOnUiThread(() -> {
            extractionProgressDialog.setMessage("Installation complete!");
            extractionProgressDialog.dismiss();

            new Handler(Looper.getMainLooper()).postDelayed(() -> {
                activity.finishAffinity();
            }, 2000);
        });

    } catch (Exception e) {
        Logger.logError(LOG_TAG, "Extraction error: " + e.getMessage());
        activity.runOnUiThread(() -> 
            extractionProgressDialog.setMessage("Error while extracting: " + e.getMessage())
        );
    } finally {
        if (process != null) process.destroy();
    }
}).start();
// Wait for completion

                                                                                     // Recreate env file since xodos prefix was wiped earlier
                    xodosShellEnvironment.writeEnvironmentToFile(activity);

                    activity.runOnUiThread(whenDone);

                } catch (final Exception e) {
                    showBootstrapErrorDialog(activity, whenDone, Logger.getStackTracesMarkdownString(null, Logger.getStackTracesStringArray(e)));

                } finally {
                    activity.runOnUiThread(() -> {
                        try {
                            progress.dismiss();
                        } catch (RuntimeException e) {
                            // Activity already dismissed - ignore.
                        }
                    });
                }
            }
        }.start();
    }

    public static void showBootstrapErrorDialog(Activity activity, Runnable whenDone, String message) {
        Logger.logErrorExtended(LOG_TAG, "Bootstrap Error:\n" + message);

        // Send a notification with the exception so that the user knows why bootstrap setup failed
        sendBootstrapCrashReportNotification(activity, message);

        activity.runOnUiThread(() -> {
            try {
                new AlertDialog.Builder(activity).setTitle(R.string.bootstrap_error_title).setMessage(R.string.bootstrap_error_body)
                    .setNegativeButton(R.string.bootstrap_error_abort, (dialog, which) -> {
                        dialog.dismiss();
                        activity.finish();
                    })
                    .setPositiveButton(R.string.bootstrap_error_try_again, (dialog, which) -> {
                        dialog.dismiss();
                        FileUtils.deleteFile("xodos prefix directory", xodos_PREFIX_DIR_PATH, true);
                        xodosInstaller.setupBootstrapIfNeeded(activity, whenDone);
                    }).show();
            } catch (WindowManager.BadTokenException e1) {
                // Activity already dismissed - ignore.
            }
        });
    }

    private static void sendBootstrapCrashReportNotification(Activity activity, String message) {
        final String title = xodosConstants.xodos_APP_NAME + " Bootstrap Error";

        // Add info of all install xodos plugin apps as well since their target sdk or installation
        // on external/portable sd card can affect xodos app files directory access or exec.
        xodosCrashUtils.sendCrashReportNotification(activity, LOG_TAG,
            title, null, "## " + title + "\n\n" + message + "\n\n" +
                xodosUtils.getxodosDebugMarkdownString(activity),
            true, false, xodosUtils.AppInfoMode.xodos_AND_PLUGIN_PACKAGES, true);
    }

    static void setupStorageSymlinks(final Context context) {
        final String LOG_TAG = "xodos-storage";
        final String title = xodosConstants.xodos_APP_NAME + " Setup Storage Error";

        Logger.logInfo(LOG_TAG, "Setting up storage symlinks.");

        new Thread() {
            public void run() {
                try {
                    Error error;
                    File storageDir = xodosConstants.xodos_STORAGE_HOME_DIR;

                    error = FileUtils.clearDirectory("~/storage", storageDir.getAbsolutePath());
                    if (error != null) {
                        Logger.logErrorAndShowToast(context, LOG_TAG, error.getMessage());
                        Logger.logErrorExtended(LOG_TAG, "Setup Storage Error\n" + error.toString());
                        xodosCrashUtils.sendCrashReportNotification(context, LOG_TAG, title, null,
                            "## " + title + "\n\n" + Error.getErrorMarkdownString(error),
                            true, false, xodosUtils.AppInfoMode.xodos_PACKAGE, true);
                        return;
                    }

                    Logger.logInfo(LOG_TAG, "Setting up storage symlinks at ~/storage/shared, ~/storage/downloads, ~/storage/dcim, ~/storage/pictures, ~/storage/music and ~/storage/movies for directories in \"" + Environment.getExternalStorageDirectory().getAbsolutePath() + "\".");

                    // Get primary storage root "/storage/emulated/0" symlink
                    File sharedDir = Environment.getExternalStorageDirectory();
                    Os.symlink(sharedDir.getAbsolutePath(), new File(storageDir, "shared").getAbsolutePath());

                    File documentsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
                    Os.symlink(documentsDir.getAbsolutePath(), new File(storageDir, "documents").getAbsolutePath());

                    File downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
                    Os.symlink(downloadsDir.getAbsolutePath(), new File(storageDir, "downloads").getAbsolutePath());

                    File dcimDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
                    Os.symlink(dcimDir.getAbsolutePath(), new File(storageDir, "dcim").getAbsolutePath());

                    File picturesDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
                    Os.symlink(picturesDir.getAbsolutePath(), new File(storageDir, "pictures").getAbsolutePath());

                    File musicDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC);
                    Os.symlink(musicDir.getAbsolutePath(), new File(storageDir, "music").getAbsolutePath());

                    File moviesDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES);
                    Os.symlink(moviesDir.getAbsolutePath(), new File(storageDir, "movies").getAbsolutePath());

                    File podcastsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PODCASTS);
                    Os.symlink(podcastsDir.getAbsolutePath(), new File(storageDir, "podcasts").getAbsolutePath());

                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {
                        File audiobooksDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_AUDIOBOOKS);
                        Os.symlink(audiobooksDir.getAbsolutePath(), new File(storageDir, "audiobooks").getAbsolutePath());
                    }

                    // Dir 0 should ideally be for primary storage
                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/app/ContextImpl.java;l=818
                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/os/Environment.java;l=219
                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/os/Environment.java;l=181
                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/services/core/java/com/android/server/StorageManagerService.java;l=3796
                    // https://cs.android.com/android/platform/superproject/+/android-7.0.0_r36:frameworks/base/services/core/java/com/android/server/MountService.java;l=3053

                    // Create "Android/data/com.xodos" symlinks
                    File[] dirs = context.getExternalFilesDirs(null);
                    if (dirs != null && dirs.length > 0) {
                        for (int i = 0; i < dirs.length; i++) {
                            File dir = dirs[i];
                            if (dir == null) continue;
                            String symlinkName = "external-" + i;
                            Logger.logInfo(LOG_TAG, "Setting up storage symlinks at ~/storage/" + symlinkName + " for \"" + dir.getAbsolutePath() + "\".");
                            Os.symlink(dir.getAbsolutePath(), new File(storageDir, symlinkName).getAbsolutePath());
                        }
                    }

                    // Create "Android/media/com.xodos" symlinks
                    dirs = context.getExternalMediaDirs();
                    if (dirs != null && dirs.length > 0) {
                        for (int i = 0; i < dirs.length; i++) {
                            File dir = dirs[i];
                            if (dir == null) continue;
                            String symlinkName = "media-" + i;
                            Logger.logInfo(LOG_TAG, "Setting up storage symlinks at ~/storage/" + symlinkName + " for \"" + dir.getAbsolutePath() + "\".");
                            Os.symlink(dir.getAbsolutePath(), new File(storageDir, symlinkName).getAbsolutePath());
                        }
                    }

                    Logger.logInfo(LOG_TAG, "Storage symlinks created successfully.");
                } catch (Exception e) {
                    Logger.logErrorAndShowToast(context, LOG_TAG, e.getMessage());
                    Logger.logStackTraceWithMessage(LOG_TAG, "Setup Storage Error: Error setting up link", e);
                    xodosCrashUtils.sendCrashReportNotification(context, LOG_TAG, title, null,
                        "## " + title + "\n\n" + Logger.getStackTracesMarkdownString(null, Logger.getStackTracesStringArray(e)),
                        true, false, xodosUtils.AppInfoMode.xodos_PACKAGE, true);
                }
            }
        }.start();
    }

    private static Error ensureDirectoryExists(File directory) {
        return FileUtils.createDirectoryFile(directory.getAbsolutePath());
    }

    public static byte[] loadZipBytes() {
        // Only load the shared library when necessary to save memory usage.
        System.loadLibrary("xodos-bootstrap");
        return getZip();
    }

    public static native byte[] getZip();

}
