package com.xodos.app;
// ======== Imports =========

import android.Manifest;
import androidx.core.content.ContextCompat;
import androidx.core.app.ActivityCompat;
import android.content.pm.PackageManager;
// Add 
import java.io.InputStream;
import java.io.FileOutputStream;
// ======== Imports ========

import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
import static com.xodos.shared.xodos.xodosConstants.xodos_FILES_DIR_PATH;
import static com.xodos.shared.xodos.xodosConstants.xodos_HOME_DIR_PATH;
import static com.xodos.shared.xodos.xodosConstants.xodos_TMP_PREFIX_DIR_PATH;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.ActivityNotFoundException;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.IBinder;
import android.preference.PreferenceManager;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.Gravity;
import android.view.InputDevice;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.autofill.AutofillManager;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.viewpager.widget.ViewPager;

import com.xodos.R;
import com.xodos.app.activities.HelpActivity;
import com.xodos.app.activities.SettingsActivity;
import com.xodos.app.api.file.FileReceiverActivity;
import com.xodos.app.terminal.DisplaySlidingWindow;
import com.xodos.app.terminal.DisplayWindowLinearLayout;
import com.xodos.app.terminal.FloatBallMenuClient;
import com.xodos.app.terminal.MenuEntryClient;
import com.xodos.app.terminal.StartEntryClient;
import com.xodos.app.terminal.xodosActivityRootView;
import com.xodos.app.terminal.xodosSessionsListViewController;
import com.xodos.app.terminal.xodosTerminalSessionActivityClient;
import com.xodos.app.terminal.xodosTerminalViewClient;
import com.xodos.app.terminal.io.TerminalToolbarViewPager;
import com.xodos.app.terminal.io.xodosTerminalExtraKeys;
import com.xodos.app.terminal.utils.CommandUtils;
import com.xodos.app.terminal.utils.FilePathUtils;
import com.xodos.app.terminal.utils.FileUtils;
import com.xodos.app.terminal.utils.ScreenUtils;
import com.xodos.shared.activities.ReportActivity;
import com.xodos.shared.activity.ActivityUtils;
import com.xodos.shared.activity.media.AppCompatActivityUtils;
import com.xodos.shared.android.PermissionUtils;
import com.xodos.shared.data.DataUtils;
import com.xodos.shared.data.IntentUtils;
import com.xodos.shared.logger.Logger;
import com.xodos.shared.xodos.xodosConstants;
import com.xodos.shared.xodos.xodosConstants.xodos_APP.xodos_ACTIVITY;
import com.xodos.shared.xodos.xodosUtils;
import com.xodos.shared.xodos.crash.xodosCrashUtils;
import com.xodos.shared.xodos.extrakeys.ExtraKeysView;
import com.xodos.shared.xodos.interact.TextInputDialogUtils;
import com.xodos.shared.xodos.settings.preferences.xodosAppSharedPreferences;
import com.xodos.shared.xodos.settings.properties.xodosAppSharedProperties;
import com.xodos.shared.xodos.theme.xodosThemeUtils;
import com.xodos.shared.theme.NightMode;
import com.xodos.shared.view.ViewUtils;
import com.xodos.terminal.TerminalSession;
import com.xodos.terminal.TerminalSessionClient;
import com.xodos.view.TerminalView;
import com.xodos.view.TerminalViewClient;
import com.xodos.x11.controller.winhandler.ProcessInfo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * A terminal emulator activity.
 * <p/>
 * See
 * <ul>
 * <li>http://www.mongrel-phones.com.au/default/how_to_make_a_local_service_and_bind_to_it_in_android</li>
 * <li>https://code.google.com/p/android/issues/detail?id=6426</li>
 * </ul>
 * about memory leaks.
 */
public class xodosActivity extends com.xodos.x11.MainActivity implements ServiceConnection {
    public static final int FILE_REQUEST_BACKUP_CODE = 101;
private static final int REQUEST_CODE_STORAGE_PERMISSION = 2000; // Add this line
public static final int FILE_REQUEST_WINE_CODE = 1002;
    private DisplaySlidingWindow mMainContentView;
    
    ////////////
    private StartEntryClient mStartEntryClient;

    //
    /**
     * The connection to the {@link xodosService}. Requested in {@link #onCreate(Bundle)} with a call to
     * {@link #bindService(Intent, ServiceConnection, int)}, and obtained and stored in
     * {@link #onServiceConnected(ComponentName, IBinder)}.
     */
    xodosService mxodosService;

    /**
     * The {@link TerminalView} shown in  {@link xodosActivity} that displays the terminal.
     */
    TerminalView mTerminalView;

    /**
     * The {@link TerminalViewClient} interface implementation to allow for communication between
     * {@link TerminalView} and {@link xodosActivity}.
     */
    xodosTerminalViewClient mxodosTerminalViewClient;

    /**
     * The {@link TerminalSessionClient} interface implementation to allow for communication between
     * {@link TerminalSession} and {@link xodosActivity}.
     */
    xodosTerminalSessionActivityClient mxodosTerminalSessionActivityClient;

    /**
     * xodos app shared preferences manager.
     */
    private xodosAppSharedPreferences mPreferences;

    /**
     * xodos app SharedProperties loaded from xodos.properties
     */
    private xodosAppSharedProperties mProperties;

    /**
     * The root view of the {@link xodosActivity}.
     */
    xodosActivityRootView mxodosActivityRootView;

    /**
     * The space at the bottom of {@link @mxodosActivityRootView} of the {@link xodosActivity}.
     */
    View mxodosActivityBottomSpaceView;

    /**
     * The terminal extra keys view.
     */
    ExtraKeysView mExtraKeysView;

    /**
     * The client for the {@link #mExtraKeysView}.
     */
    xodosTerminalExtraKeys mxodosTerminalExtraKeys;

    /**
     * The xodos sessions list controller.
     */
    xodosSessionsListViewController mxodosSessionListViewController;

    /**
     * The {@link xodosActivity} broadcast receiver for various things like terminal style configuration changes.
     */
    private final BroadcastReceiver mxodosActivityBroadcastReceiver = new xodosActivityBroadcastReceiver();

    /**
     * The last toast shown, used cancel current toast before showing new in {@link #showToast(String, boolean)}.
     */
    Toast mLastToast;

    /**
     * If between onResume() and onStop(). Note that only one session is in the foreground of the terminal view at the
     * time, so if the session causing a change is not in the foreground it should probably be treated as background.
     */
    private boolean mIsVisible;

    /**
     * If onResume() was called after onCreate().
     */
    private boolean mIsOnResumeAfterOnCreate = false;

    /**
     * If activity was restarted like due to call to {@link #recreate()} after receiving
     * {@link xodos_ACTIVITY#ACTION_RELOAD_STYLE}, system dark night mode was changed or activity
     * was killed by android.
     */
    private boolean mIsActivityRecreated = false;

    /**
     * The {@link xodosActivity} is in an invalid state and must not be run.
     */
    private boolean mIsInvalidState;

    private int mNavBarHeight;

    private float mTerminalToolbarDefaultHeight;
    private MenuEntryClient mMenuEntryClient;
    private boolean isExit;

    private static final int CONTEXT_MENU_SELECT_URL_ID = 0;
    private static final int CONTEXT_MENU_SHARE_TRANSCRIPT_ID = 1;
    private static final int CONTEXT_MENU_SHARE_SELECTED_TEXT = 10;
    private static final int CONTEXT_MENU_AUTOFILL_ID = 2;
    private static final int CONTEXT_MENU_RESET_TERMINAL_ID = 3;
    private static final int CONTEXT_MENU_KILL_PROCESS_ID = 4;
    private static final int CONTEXT_MENU_STYLING_ID = 5;
    private static final int CONTEXT_MENU_TOGGLE_KEEP_SCREEN_ON = 6;
    private static final int CONTEXT_MENU_HELP_ID = 7;
    private static final int CONTEXT_MENU_SETTINGS_ID = 8;
    private static final int CONTEXT_MENU_REPORT_ID = 9;

    private static final String ARG_TERMINAL_TOOLBAR_TEXT_INPUT = "terminal_toolbar_text_input";
    private static final String ARG_ACTIVITY_RECREATED = "activity_recreated";

    private static final String LOG_TAG = "xodosActivity";
    private FloatBallMenuClient mFloatBallMenuClient;


    public void onMenuOpen(boolean isOpen, int flag) {
        if (isOpen && flag == 0) {
            setX11FocusedChanged(false);
        } else {
            setX11FocusedChanged(true);
        }
        if (mFloatBallMenuClient != null) {
            if (isOpen && flag == 0) {
                mFloatBallMenuClient.setTerminalShow(true);
            } else if (isOpen && flag == 1) {
                mFloatBallMenuClient.setShowPreference(true);
            } else {
                mFloatBallMenuClient.setShowPreference(false);
                mFloatBallMenuClient.setTerminalShow(false);
            }
        }
    }


    public boolean sendTouchEvent(MotionEvent ev) {
        if (inputControlsView.getProfile() != null) {
            int[] view0Location = new int[2];
            int[] viewLocation = new int[2];

            touchpadView.getLocationOnScreen(view0Location);
            getLorieView().getLocationOnScreen(viewLocation);

            int offsetX = viewLocation[0] - view0Location[0];
            int offsetY = viewLocation[1] - view0Location[1];

            getLorieView().screenInfo.offsetX = offsetX;
            getLorieView().screenInfo.offsetY = offsetY;
            inputControlsView.handleTouchEvent(ev);
            return true;
        }
        if (ev.isFromSource(InputDevice.SOURCE_MOUSE)) {
            return false;
        }
//                Log.d("sendTouchEvent",String.valueOf(inputControllerViewHandled));
        if (null != mInputHandler) {
            if (!inputControllerViewHandled) {
                mInputHandler.handleTouchEvent(mMainContentView, getLorieView(), ev);
            }
        }
        return true;
    }


    public void onEdgeReached() {
        getDrawer().openDrawer(GravityCompat.START);
    }

    @SuppressLint("ResourceType")
    @Override
    public void onCreate(Bundle savedInstanceState) {
        Logger.logDebug(LOG_TAG, "onCreate");
        
          //    Toast.makeText(this, "🟡 loading,,,", Toast.LENGTH_SHORT).show(); // ✅ DEBUG   
    
        mIsOnResumeAfterOnCreate = true;
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        if (savedInstanceState != null)
            mIsActivityRecreated = savedInstanceState.getBoolean(ARG_ACTIVITY_RECREATED, false);

        // Delete ReportInfo serialized object files from cache older than 14 days
        ReportActivity.deleteReportInfoFilesOlderThanXDays(this, 14, false);

        // Load xodos app SharedProperties from disk
        mProperties = xodosAppSharedProperties.getProperties();
        reloadProperties();

        setActivityTheme();
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_xodos_main);
        mMainContentView = findViewById(R.id.id_xodos_layout);
        mMainContentView.setxodosActivity(this);

        ViewGroup vGroup = findViewById(R.id.id_xodos_layout);

        DisplayWindowLinearLayout viewContainer = (DisplayWindowLinearLayout) vGroup.getChildAt(0);
        LinearLayout lorieLayout = (LinearLayout) viewContainer.getChildAt(1);
        lorieLayout.addView(lorieContentView);
        getSupportFragmentManager().beginTransaction().replace(R.id.id_window_preference, loriePreferenceFragment).commit();


        // Load xodos shared preferences
        // This will also fail if xodosConstants.xodos_PACKAGE_NAME does not equal applicationId
        mPreferences = xodosAppSharedPreferences.build(this, true);
        if (mPreferences == null) {
            // An AlertDialog should have shown to kill the app, so we don't continue running activity code
            mIsInvalidState = true;
            return;
        }

        setMargins();

        mxodosActivityRootView = findViewById(R.id.activity_xodos_root_view);
        mxodosActivityRootView.setActivity(this);
        mxodosActivityBottomSpaceView = findViewById(R.id.activity_xodos_bottom_space_view);
        mxodosActivityRootView.setOnApplyWindowInsetsListener(new xodosActivityRootView.WindowInsetsListener());
        Bitmap bitmap = null;
        int width = ScreenUtils.getScreenWidth(this);
        int height = ScreenUtils.getScreenHeight(this);
        bitmap = Bitmap.createBitmap(width, height,
            Bitmap.Config.ARGB_8888);
        bitmap.eraseColor(Color.parseColor("#CC000000"));
        mxodosActivityRootView.setBackground(new BitmapDrawable(getResources(), bitmap));
        View content = findViewById(android.R.id.content);
        content.setOnApplyWindowInsetsListener((v, insets) -> {
            mNavBarHeight = insets.getSystemWindowInsetBottom();
            return insets;
        });

        setxodosTerminalViewAndClients();

        setTerminalToolbarView(savedInstanceState);

        setSettingsButtonView();

        setNewSessionButtonView();

        setToggleKeyboardView();

        mMenuEntryClient = new MenuEntryClient(this, mxodosTerminalSessionActivityClient);
        
// After initializing mxodosTerminalSessionActivityClient
    mStartEntryClient = new StartEntryClient(this, mxodosTerminalSessionActivityClient);
    mStartEntryClient.init();
    

        registerForContextMenu(mTerminalView);

        FileReceiverActivity.updateFileReceiverActivityComponentsState(this);

        setRecoverView();
        setX11Server();
        setBackupView();
        setFloatBallMenuClient();


        try {
            // Start the {@link xodosService} and make it run regardless of who is bound to it
            Intent serviceIntent = new Intent(this, xodosService.class);
            startService(serviceIntent);

            // Attempt to bind to the service, this will call the {@link #onServiceConnected(ComponentName, IBinder)}
            // callback if it succeeds.
            if (!bindService(serviceIntent, this, 0))
                throw new RuntimeException("bindService() failed");
        } catch (Exception e) {
            Logger.logStackTraceWithMessage(LOG_TAG, "xodosActivity failed to start xodosService", e);
            Logger.showToast(this,
                getString(e.getMessage() != null && e.getMessage().contains("app is in background") ?
                    R.string.error_xodos_service_start_failed_bg : R.string.error_xodos_service_start_failed_general),
                true);
            mIsInvalidState = true;
            return;
        }

        // Send the {@link xodosConstants#BROADCAST_xodos_OPENED} broadcast to notify apps that xodos
        // app has been opened.
        xodosUtils.sendxodosOpenedBroadcast(this);
        xodosActivityListener = new xodosActivityListener() {
            @Override
            public void onX11PreferenceSwitchChange(boolean isOpen) {
                mMainContentView.setX11PreferenceSwitchSlider(isOpen);
            }

            @Override
            public void releaseSlider(boolean open) {
                if (!xodosActivity.this.mEnableFloatBallMenu
                    || xodosActivity.this.mFloatBallMenuClient == null) {
                    mMainContentView.releaseSlider(open);
                }
            }

            @Override
            public void onChangeOrientation(int landscape) {
                mMainContentView.changeLayoutOrientation(landscape);
                hideInputControls();
                inputControlsManager.loadProfiles(true);
            }

            @Override
            public void reInstallX11StartScript(Activity activity) {
                activity.runOnUiThread(() -> {
                    FileUtils.copyAssetsFile2Phone(activity, "install");
                    FileUtils.copyAssetsFile2Phone(activity, "xodos.tar.xz");
                    FileUtils.copyAssetsFile2Phone(activity, "setup");
                    FileUtils.copyAssetsFile2Phone(activity, "installproot");
FileUtils.copyAssetsFile2Phone(activity, "installkali");
FileUtils.copyAssetsFile2Phone(activity, "switch");
FileUtils.copyAssetsFile2Phone(activity, "fix");
                    FileUtils.copyAssetsFile2Phone(activity, "collect_process_info");
                    CommandUtils.exec(activity, "chmod", new ArrayList<>(Arrays.asList("+x", xodos_FILES_DIR_PATH + "/home/install")));
                    CommandUtils.exec(activity, "chmod", new ArrayList<>(Arrays.asList("+x", xodos_FILES_DIR_PATH + "/home/collect_process_info")));
                    FileUtils.copyAssetsFile2Phone(activity, "xodos-x11-nightly-1.03.10-0-all.deb");
                    FileUtils.copyAssetsFile2Phone(activity, "xkeyboard-config_2.45_all.deb");
                    CommandUtils.execInPath(activity, "install", null, "/home/");
                });
            }

            @Override
            public void stopDesktop(Activity activity) {
                CommandUtils.exec(activity, "stopserver", null);
            }

            @Override
            public void openSoftwareKeyboard() {
                switchSoftKeyboard(false);
            }

            @Override
            public void showProcessManager() {
                showProcessManagerDialog();
            }

            @Override
            public void changePreference(String key) {
                onPreferencesChanged(key);
            }

            @Override
            public List<ProcessInfo> collectProcessorInfo(String tag) {
                //collect，parse,fill
                List<ProcessInfo> processInfoList = new ArrayList<>();
                runOnUiThread(() -> {
                    String path = String.format("%s/process_info", xodos_TMP_PREFIX_DIR_PATH);
                    CommandUtils.execInPath(getInstance(), "collect_process_info",
                        new ArrayList<>(Arrays.asList(tag)), "/home/");
                    if (tag.equals("1")) {
                        return;
                    }
                    File processorFile = new File(path);
                    BufferedReader reader = null;
                    String temp = null;
                    if (processorFile.exists()) {
                        try {
                            reader = new BufferedReader(new FileReader(processorFile));
                            while ((temp = reader.readLine()) != null) {
                                String[] strs = temp.split(" ");
                                if (strs.length < 4) {
                                    continue;
                                }
                                int lastIndex = strs[3].lastIndexOf("/");
                                String fileName = strs[3].substring(lastIndex + 1);
                                if (strs[0].toUpperCase().contains("PID") ||
                                    fileName.toUpperCase().contains("PS") ||
                                    fileName.toUpperCase().contains("SORT") ||
                                    fileName.toUpperCase().contains("HEAD") ||
                                    fileName.toUpperCase().contains("AWK")) {
                                    continue;
                                }

                                ProcessInfo processInfo = new ProcessInfo(Integer.parseInt(strs[0]),
                                    fileName, Long.parseLong(strs[1]), 15, false);
                                processInfoList.add(processInfo);
                            }
                        } catch (IOException e) {
                            throw new RuntimeException(e);
                        } finally {
                            if (reader != null) {
                                try {
                                    reader.close();
                                } catch (IOException e) {
                                    throw new RuntimeException(e);
                                }
                            }
                        }
                    }
                });
                return processInfoList.isEmpty() ? null : processInfoList;
            }

            @Override
            public void setFloatBallMenu(boolean enableFloatBallMenu, boolean enableGlobalFloatBallMenu) {
                if (mFloatBallMenuClient != null) {
                    if (!enableFloatBallMenu) {
                        mFloatBallMenuClient.onDestroy();
                        mFloatBallMenuClient = null;
                    } else {
                        if (enableGlobalFloatBallMenu != mFloatBallMenuClient.isGlobalFloatBallMenu()) {
                            mFloatBallMenuClient.onDestroy();
                            mFloatBallMenuClient = null;
                            if (enableFloatBallMenu) {
                                handler.postDelayed(() -> {
                                    mFloatBallMenuClient = new FloatBallMenuClient(xodosActivity.this);
                                    mFloatBallMenuClient.onCreate();
                                }, 2000);
                            }

                        }
                    }
                } else {
                    if (enableFloatBallMenu) {
                        mFloatBallMenuClient = new FloatBallMenuClient(xodosActivity.this);
                        mFloatBallMenuClient.onCreate();
                    }
                }
            }
        };
    }

    private void setFloatBallMenuClient() {
    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
    mEnableFloatBallMenu = preferences.getBoolean("enableFloatBallMenu", false);

    if (mFloatBallMenuClient != null) {
        mFloatBallMenuClient.onDestroy(); // ✅ Cleanup previous if any (from last session)
        mFloatBallMenuClient = null;
    }

    if (mEnableFloatBallMenu) {
        mFloatBallMenuClient = new FloatBallMenuClient(this);
        mFloatBallMenuClient.onCreate(); // ✅ Recreate only if preference is enabled
    }
}

    @Override
    public void onStart() {
        super.onStart();

        Logger.logDebug(LOG_TAG, "onStart");

        if (mIsInvalidState) return;

        mIsVisible = true;

        if (mxodosTerminalSessionActivityClient != null)
            mxodosTerminalSessionActivityClient.onStart();

        if (mxodosTerminalViewClient != null)
            mxodosTerminalViewClient.onStart();

        if (mPreferences.isTerminalMarginAdjustmentEnabled())
            addxodosActivityRootViewGlobalLayoutListener();

        registerxodosActivityBroadcastReceiver();
        setSlideWindowLayout();
    }

    @Override
    public void onResume() {
        super.onResume();
        inputControlsManager.loadProfiles(true);
        mMainContentView.onResume();
        Logger.logVerbose(LOG_TAG, "onResume");

        if (mIsInvalidState) return;

        if (mxodosTerminalSessionActivityClient != null)
            mxodosTerminalSessionActivityClient.onResume();

        if (mxodosTerminalViewClient != null)
            mxodosTerminalViewClient.onResume();

        // Check if a crash happened on last run of the app or if a plugin crashed and show a
        // notification with the crash details if it did
        xodosCrashUtils.notifyAppCrashFromCrashLogFile(this, LOG_TAG);

        mIsOnResumeAfterOnCreate = false;
    }

    @Override
    protected void onStop() {
        super.onStop();

        Logger.logDebug(LOG_TAG, "onStop");

        if (mIsInvalidState) return;

        mIsVisible = false;

        if (mxodosTerminalSessionActivityClient != null)
            mxodosTerminalSessionActivityClient.onStop();

        if (mxodosTerminalViewClient != null)
            mxodosTerminalViewClient.onStop();

        removexodosActivityRootViewGlobalLayoutListener();

        unregisterxodosActivityBroadcastReceiver();
        getDrawer().closeDrawers();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();

        Logger.logDebug(LOG_TAG, "onDestroy");

        if (mIsInvalidState) return;

        if (mxodosService != null) {
            // Do not leave service and session clients with references to activity.
            mxodosService.unsetxodosTerminalSessionClient();
            mxodosService = null;
        }

        try {
            unbindService(this);
        } catch (Exception e) {
            // ignore.
        }
        if (mFloatBallMenuClient != null) {
            mFloatBallMenuClient.onDestroy();
        }
    }

    @Override
    public void onAttachedToWindow() {
        super.onAttachedToWindow();
        if (mFloatBallMenuClient != null) {
            mFloatBallMenuClient.onAttachedToWindow();
        }
    }

    @Override
    public void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        if (mFloatBallMenuClient != null) {
            {
                mFloatBallMenuClient.onDetachedFromWindow();
            }
        }
    }

    @Override
    public void onSaveInstanceState(@NonNull Bundle savedInstanceState) {
        Logger.logVerbose(LOG_TAG, "onSaveInstanceState");

        super.onSaveInstanceState(savedInstanceState);
        saveTerminalToolbarTextInput(savedInstanceState);
        savedInstanceState.putBoolean(ARG_ACTIVITY_RECREATED, true);
    }


    /**
     * Part of the {@link ServiceConnection} interface. The service is bound with
     * {@link #bindService(Intent, ServiceConnection, int)} in {@link #onCreate(Bundle)} which will cause a call to this
     * callback method.
     */
    @Override
    public void onServiceConnected(ComponentName componentName, IBinder service) {
        Logger.logDebug(LOG_TAG, "onServiceConnected");

        mxodosService = ((xodosService.LocalBinder) service).service;

        setxodosSessionsListView();

        final Intent intent = getIntent();
        setIntent(null);

        if (mxodosService.isxodosSessionsEmpty()) {
            if (mIsVisible) {                   
                     // ======== Add Permission Check  ========
            checkStoragePermissionsAndRun(() -> {
                xodosInstaller.setupBootstrapIfNeeded(xodosActivity.this, () -> {
                    if (mxodosService == null) return;
                    try {
                        boolean launchFailsafe = (intent != null && intent.getExtras() != null) 
                            && intent.getExtras().getBoolean(xodos_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);
                        mxodosTerminalSessionActivityClient.addNewSession(launchFailsafe, null);
                    } catch (WindowManager.BadTokenException e) {
                        finishActivityIfNotFinishing();
                    }
                });
            });
            } else {
                // The service connected while not in foreground - just bail out.
                finishActivityIfNotFinishing();
            }
        } else {
            // If xodos was started from launcher "New session" shortcut and activity is recreated,
            // then the original intent will be re-delivered, resulting in a new session being re-added
            // each time.
            if (!mIsActivityRecreated && intent != null && Intent.ACTION_RUN.equals(intent.getAction())) {
                // Android 7.1 app shortcut from res/xml/shortcuts.xml.
                boolean isFailSafe = intent.getBooleanExtra(xodos_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);
                mxodosTerminalSessionActivityClient.addNewSession(isFailSafe, null);
            } else {
                mxodosTerminalSessionActivityClient.setCurrentSession(mxodosTerminalSessionActivityClient.getCurrentStoredSessionOrLast());
            }
        }

        // Update the {@link TerminalSession} and {@link TerminalEmulator} clients.
        mxodosService.setxodosTerminalSessionClient(mxodosTerminalSessionActivityClient);
    }

// ======== Add These Methods ========
private void checkStoragePermissionsAndRun(Runnable onGranted) {
    if (hasStoragePermissions()) {
        onGranted.run();
    } else {
        new AlertDialog.Builder(this)
            .setTitle(R.string.storage_permission_title)
            .setMessage(R.string.storage_permission_message)
            .setPositiveButton(R.string.action_grant, (dialog, which) -> {
                ActivityCompat.requestPermissions(
                    xodosActivity.this,
                    new String[]{
                        Manifest.permission.READ_EXTERNAL_STORAGE,
                        Manifest.permission.WRITE_EXTERNAL_STORAGE
                    },
                    REQUEST_CODE_STORAGE_PERMISSION
                );
            })
            .setNegativeButton(R.string.action_exit, (dialog, which) -> finish())
            .setCancelable(false)
            .show();
    }
}

private boolean hasStoragePermissions() {
    return ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED
        && ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
}
// ======== End of Methods ========
    @Override
    public void onServiceDisconnected(ComponentName name) {
        Logger.logDebug(LOG_TAG, "onServiceDisconnected");

        // Respect being stopped from the {@link xodosService} notification action.
        finishActivityIfNotFinishing();
    }

    private void reloadProperties() {
        mProperties.loadxodosPropertiesFromDisk();

        if (mxodosTerminalViewClient != null)
            mxodosTerminalViewClient.onReloadProperties();
    }


    private void setActivityTheme() {
        // Update NightMode.APP_NIGHT_MODE
        xodosThemeUtils.setAppNightMode(mProperties.getNightMode());

        // Set activity night mode. If NightMode.SYSTEM is set, then android will automatically
        // trigger recreation of activity when uiMode/dark mode configuration is changed so that
        // day or night theme takes affect.
        AppCompatActivityUtils.setNightMode(this, NightMode.getAppNightMode().getName(), true);
    }

    private void setMargins() {
        RelativeLayout relativeLayout = findViewById(R.id.activity_xodos_root_relative_layout);
        int marginHorizontal = mProperties.getTerminalMarginHorizontal();
        int marginVertical = mProperties.getTerminalMarginVertical();
        ViewUtils.setLayoutMarginsInDp(relativeLayout, marginHorizontal, marginVertical, marginHorizontal, marginVertical);
    }


    public void addxodosActivityRootViewGlobalLayoutListener() {
        getxodosActivityRootView().getViewTreeObserver().addOnGlobalLayoutListener(getxodosActivityRootView());
    }

    public void removexodosActivityRootViewGlobalLayoutListener() {
        if (getxodosActivityRootView() != null)
            getxodosActivityRootView().getViewTreeObserver().removeOnGlobalLayoutListener(getxodosActivityRootView());
    }

    private void setX11Server() {
        findViewById(com.xodos.x11.R.id.tx_exit_button).setOnClickListener((v) -> {
            if (isExit) {
                finishActivityIfNotFinishing();
                Intent exitIntent = new Intent(this, xodosService.class)
                    .setAction(xodosConstants.xodos_APP.xodos_SERVICE.ACTION_STOP_SERVICE);
                startService(exitIntent);
                finishActivityIfNotFinishing();
            } else {
                Toast.makeText(this, R.string.exit_toast_text, Toast.LENGTH_SHORT).show();
                isExit = true;
                handler.postDelayed(() -> isExit = false, 2000);
            }
        });
      //  StartEntryClient startEntryClient = new StartEntryClient(this, mxodosTerminalSessionActivityClient);
        mStartEntryClient.init();
    }

    private void startX11Display() {
        ArrayList<String> args = new ArrayList<>();
        args.add(":1");
        CommandUtils.exec(this, "xodos-x11", args);
    }

    private void setRecoverView() {
    findViewById(R.id.recover_button).setOnClickListener(v -> {
        Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
        intent.setType("*/*");
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION |
                        Intent.FLAG_GRANT_WRITE_URI_PERMISSION |
                        Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);
        startActivityForResult(intent, FILE_REQUEST_BACKUP_CODE);
    });
}

    private void setBackupView() {
        findViewById(R.id.backup_button).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String command = "tar -Jcf /sdcard/xodos-backup.tar.xz -C /data/data/com.xodos/files ./home ./usr \n";
                File file = new File(getFilesDir().getAbsolutePath() + File.separator + "home" + File.separator + "storage");
                if (!file.exists()) {
                    command = "xodos-setup-storage;sleep 5s;tar -Jcf /sdcard/xodos-backup.tar.xz -C /data/data/com.xodos/files ./home ./usr \n";
                }
                mxodosTerminalSessionActivityClient.getCurrentStoredSessionOrLast().write(command);
                mMainContentView.setTerminalViewSwitchSlider(true);
                closeTerminalSessionListView();
            }
        });
    }

    private void setSlideWindowLayout() {
        Configuration configuration = getResources().getConfiguration();
        boolean landscape = !(configuration.orientation == SCREEN_ORIENTATION_PORTRAIT);
        DisplaySlidingWindow.setLandscape(landscape);
//        Log.d("setSlideWindowLayout", "configuration:" + landscape);
    }

    private void closeTerminalSessionListView() {
        getDrawer().closeDrawers();
    }

    private void setxodosTerminalViewAndClients() {
        // Set xodos terminal view and session clients
        mxodosTerminalSessionActivityClient = new xodosTerminalSessionActivityClient(this);
        mxodosTerminalViewClient = new xodosTerminalViewClient(this, mxodosTerminalSessionActivityClient);

        // Set xodos terminal view
        mTerminalView = findViewById(R.id.terminal_view);
        mTerminalView.setTerminalViewClient(mxodosTerminalViewClient);

        if (mxodosTerminalViewClient != null)
            mxodosTerminalViewClient.onCreate();

    }

    private void setxodosSessionsListView() {
        ListView xodosSessionsListView = findViewById(R.id.terminal_sessions_list);
        mxodosSessionListViewController = new xodosSessionsListViewController(this, mxodosService.getxodosSessions());
        xodosSessionsListView.setAdapter(mxodosSessionListViewController);
        xodosSessionsListView.setOnItemClickListener(mxodosSessionListViewController);
        xodosSessionsListView.setOnItemLongClickListener(mxodosSessionListViewController);
    }


    private void setTerminalToolbarView(Bundle savedInstanceState) {
        mxodosTerminalExtraKeys = new xodosTerminalExtraKeys(this, mTerminalView,
            mxodosTerminalViewClient, mxodosTerminalSessionActivityClient);

        final ViewPager terminalToolbarViewPager = getTerminalToolbarViewPager();
        if (mPreferences.shouldShowTerminalToolbar())
            terminalToolbarViewPager.setVisibility(View.VISIBLE);
        ViewGroup.LayoutParams layoutParams = terminalToolbarViewPager.getLayoutParams();
        mTerminalToolbarDefaultHeight = layoutParams.height;

        setTerminalToolbarHeight();

        String savedTextInput = null;
        if (savedInstanceState != null)
            savedTextInput = savedInstanceState.getString(ARG_TERMINAL_TOOLBAR_TEXT_INPUT);

        terminalToolbarViewPager.setAdapter(new TerminalToolbarViewPager.PageAdapter(this, savedTextInput));
        terminalToolbarViewPager.addOnPageChangeListener(new TerminalToolbarViewPager.OnPageChangeListener(this, terminalToolbarViewPager));
    }

    private void setTerminalToolbarHeight() {
        final ViewPager terminalToolbarViewPager = getTerminalToolbarViewPager();
        if (terminalToolbarViewPager == null) return;

        ViewGroup.LayoutParams layoutParams = terminalToolbarViewPager.getLayoutParams();
        layoutParams.height = Math.round(mTerminalToolbarDefaultHeight *
            (mxodosTerminalExtraKeys.getExtraKeysInfo() == null ? 0 : mxodosTerminalExtraKeys.getExtraKeysInfo().getMatrix().length) *
            mProperties.getTerminalToolbarHeightScaleFactor());
        terminalToolbarViewPager.setLayoutParams(layoutParams);
    }

    public void toggleTerminalToolbar() {
        final ViewPager terminalToolbarViewPager = getTerminalToolbarViewPager();
        if (terminalToolbarViewPager == null) return;
        final boolean showNow = mPreferences.toogleShowTerminalToolbar();
        Logger.showToast(this, (showNow ? getString(R.string.msg_enabling_terminal_toolbar) : getString(R.string.msg_disabling_terminal_toolbar)), true);
        terminalToolbarViewPager.setVisibility(showNow ? View.VISIBLE : View.GONE);
        if (showNow && isTerminalToolbarTextInputViewSelected()) {
            // Focus the text input view if just revealed.
            findViewById(R.id.terminal_toolbar_text_input).requestFocus();
        }
    }

    private void saveTerminalToolbarTextInput(Bundle savedInstanceState) {
        if (savedInstanceState == null) return;

        final EditText textInputView = findViewById(R.id.terminal_toolbar_text_input);
        if (textInputView != null) {
            String textInput = textInputView.getText().toString();
            if (!textInput.isEmpty())
                savedInstanceState.putString(ARG_TERMINAL_TOOLBAR_TEXT_INPUT, textInput);
        }
    }


    private void setSettingsButtonView() {
        ImageButton settingsButton = findViewById(R.id.settings_button);
        settingsButton.setOnClickListener(v -> {
            ActivityUtils.startActivity(this, new Intent(this, SettingsActivity.class));
        });
    }

    private void setNewSessionButtonView() {
        View newSessionButton = findViewById(R.id.new_session_button);
        newSessionButton.setOnClickListener(v -> mxodosTerminalSessionActivityClient.addNewSession(false, null));
        newSessionButton.setOnLongClickListener(v -> {
            TextInputDialogUtils.textInput(xodosActivity.this, R.string.title_create_named_session, null,
                R.string.action_create_named_session_confirm, text -> mxodosTerminalSessionActivityClient.addNewSession(false, text),
                R.string.action_new_session_failsafe, text -> mxodosTerminalSessionActivityClient.addNewSession(true, text),
                -1, null, null);
            return true;
        });
    }

    private void setToggleKeyboardView() {
        findViewById(R.id.toggle_keyboard_button).setOnClickListener(v -> {
            mxodosTerminalViewClient.onToggleSoftKeyboardRequest();
            getDrawer().closeDrawers();
        });

        findViewById(R.id.toggle_keyboard_button).setOnLongClickListener(v -> {
            toggleTerminalToolbar();
            return true;
        });
    }

    @SuppressLint({"RtlHardcoded", "MissingSuperCall"})
    @Override
    public void onBackPressed() {
        if (getDrawer().isDrawerOpen(Gravity.LEFT)) {
            getDrawer().closeDrawers();
        } else {
//            finishActivityIfNotFinishing();
            if (!mEnableFloatBallMenu || mFloatBallMenuClient == null) {
                mMainContentView.releaseSlider(true);
            }
        }
    }

    public void finishActivityIfNotFinishing() {
        // prevent duplicate calls to finish() if called from multiple places
        if (!xodosActivity.this.isFinishing()) {
            finish();
        }
    }

    /**
     * Show a toast and dismiss the last one if still visible.
     */
    public void showToast(String text, boolean longDuration) {
        if (text == null || text.isEmpty()) return;
        if (mLastToast != null) mLastToast.cancel();
        mLastToast = Toast.makeText(xodosActivity.this, text, longDuration ? Toast.LENGTH_LONG : Toast.LENGTH_SHORT);
        mLastToast.setGravity(Gravity.TOP, 0, 0);
        mLastToast.show();
    }


    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        TerminalSession currentSession = getCurrentSession();
        if (currentSession == null) return;

        boolean addAutoFillMenu = false;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            AutofillManager autofillManager = getSystemService(AutofillManager.class);
            if (autofillManager != null && autofillManager.isEnabled()) {
                addAutoFillMenu = true;
            }
        }

        menu.add(Menu.NONE, CONTEXT_MENU_SELECT_URL_ID, Menu.NONE, R.string.action_select_url);
        menu.add(Menu.NONE, CONTEXT_MENU_SHARE_TRANSCRIPT_ID, Menu.NONE, R.string.action_share_transcript);
        if (!DataUtils.isNullOrEmpty(mTerminalView.getStoredSelectedText()))
            menu.add(Menu.NONE, CONTEXT_MENU_SHARE_SELECTED_TEXT, Menu.NONE, R.string.action_share_selected_text);
        if (addAutoFillMenu)
            menu.add(Menu.NONE, CONTEXT_MENU_AUTOFILL_ID, Menu.NONE, R.string.action_autofill_password);
        menu.add(Menu.NONE, CONTEXT_MENU_RESET_TERMINAL_ID, Menu.NONE, R.string.action_reset_terminal);
        menu.add(Menu.NONE, CONTEXT_MENU_KILL_PROCESS_ID, Menu.NONE, getResources().getString(R.string.action_kill_process, getCurrentSession().getPid())).setEnabled(currentSession.isRunning());
        menu.add(Menu.NONE, CONTEXT_MENU_STYLING_ID, Menu.NONE, R.string.action_style_terminal);
        menu.add(Menu.NONE, CONTEXT_MENU_TOGGLE_KEEP_SCREEN_ON, Menu.NONE, R.string.action_toggle_keep_screen_on).setCheckable(true).setChecked(mPreferences.shouldKeepScreenOn());
        menu.add(Menu.NONE, CONTEXT_MENU_HELP_ID, Menu.NONE, R.string.action_open_help);
        menu.add(Menu.NONE, CONTEXT_MENU_SETTINGS_ID, Menu.NONE, R.string.action_open_settings);
        menu.add(Menu.NONE, CONTEXT_MENU_REPORT_ID, Menu.NONE, R.string.action_report_issue);
    }

    /**
     * Hook system menu to show context menu instead.
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        mTerminalView.showContextMenu();
        return false;
    }

    @Override
    public boolean onContextItemSelected(MenuItem item) {
        TerminalSession session = getCurrentSession();

        switch (item.getItemId()) {
            case CONTEXT_MENU_SELECT_URL_ID:
                mxodosTerminalViewClient.showUrlSelection();
                return true;
            case CONTEXT_MENU_SHARE_TRANSCRIPT_ID:
                mxodosTerminalViewClient.shareSessionTranscript();
                return true;
            case CONTEXT_MENU_SHARE_SELECTED_TEXT:
                mxodosTerminalViewClient.shareSelectedText();
                return true;
            case CONTEXT_MENU_AUTOFILL_ID:
                requestAutoFill();
                return true;
            case CONTEXT_MENU_RESET_TERMINAL_ID:
                onResetTerminalSession(session);
                return true;
            case CONTEXT_MENU_KILL_PROCESS_ID:
                showKillSessionDialog(session);
                return true;
            case CONTEXT_MENU_STYLING_ID:
                showStylingDialog();
                return true;
            case CONTEXT_MENU_TOGGLE_KEEP_SCREEN_ON:
                toggleKeepScreenOn();
                return true;
            case CONTEXT_MENU_HELP_ID:
                ActivityUtils.startActivity(this, new Intent(this, HelpActivity.class));
                return true;
            case CONTEXT_MENU_SETTINGS_ID:
                ActivityUtils.startActivity(this, new Intent(this, SettingsActivity.class));
                return true;
            case CONTEXT_MENU_REPORT_ID:
                mxodosTerminalViewClient.reportIssueFromTranscript();
                return true;
            default:
                return super.onContextItemSelected(item);
        }
    }

    @Override
    public void onContextMenuClosed(Menu menu) {
        super.onContextMenuClosed(menu);
        // onContextMenuClosed() is triggered twice if back button is pressed to dismiss instead of tap for some reason
        mTerminalView.onContextMenuClosed(menu);
    }

    private void showKillSessionDialog(TerminalSession session) {
        if (session == null) return;

        final AlertDialog.Builder b = new AlertDialog.Builder(this);
        b.setIcon(android.R.drawable.ic_dialog_alert);
        b.setMessage(R.string.title_confirm_kill_process);
        b.setPositiveButton(android.R.string.yes, (dialog, id) -> {
            dialog.dismiss();
            session.finishIfRunning();
        });
        b.setNegativeButton(android.R.string.no, null);
        b.show();
    }

    private void onResetTerminalSession(TerminalSession session) {
        if (session != null) {
            session.reset();
            showToast(getResources().getString(R.string.msg_terminal_reset), true);

            if (mxodosTerminalSessionActivityClient != null)
                mxodosTerminalSessionActivityClient.onResetTerminalSession();
        }
    }

    private void showStylingDialog() {
        Intent stylingIntent = new Intent();
        stylingIntent.setClassName(xodosConstants.xodos_STYLING_PACKAGE_NAME, xodosConstants.xodos_STYLING.xodos_STYLING_ACTIVITY_NAME);
        try {
            startActivity(stylingIntent);
        } catch (ActivityNotFoundException | IllegalArgumentException e) {
            // The startActivity() call is not documented to throw IllegalArgumentException.
            // However, crash reporting shows that it sometimes does, so catch it here.
            new AlertDialog.Builder(this).setMessage(getString(R.string.error_styling_not_installed))
                .setPositiveButton(R.string.action_styling_install,
                    (dialog, which) -> ActivityUtils.startActivity(this, new Intent(Intent.ACTION_VIEW, Uri.parse(xodosConstants.xodos_STYLING_FDROID_PACKAGE_URL))))
                .setNegativeButton(android.R.string.cancel, null).show();
        }
    }

    private void toggleKeepScreenOn() {
        if (mTerminalView.getKeepScreenOn()) {
            mTerminalView.setKeepScreenOn(false);
            mPreferences.setKeepScreenOn(false);
        } else {
            mTerminalView.setKeepScreenOn(true);
            mPreferences.setKeepScreenOn(true);
        }
    }

    private void requestAutoFill() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            AutofillManager autofillManager = getSystemService(AutofillManager.class);
            if (autofillManager != null && autofillManager.isEnabled()) {
                autofillManager.requestAutofill(mTerminalView);
            }
        }
    }


    /**
     * For processes to access primary external storage (/sdcard, /storage/emulated/0, ~/storage/shared),
     * xodos needs to be granted legacy WRITE_EXTERNAL_STORAGE or MANAGE_EXTERNAL_STORAGE permissions
     * if targeting targetSdkVersion 30 (android 11) and running on sdk 30 (android 11) and higher.
     */
    public void requestStoragePermission(boolean isPermissionCallback) {
        new Thread() {
            @Override
            public void run() {
                // Do not ask for permission again
                int requestCode = isPermissionCallback ? -1 : PermissionUtils.REQUEST_GRANT_STORAGE_PERMISSION;

                // If permission is granted, then also setup storage symlinks.
                if (PermissionUtils.checkAndRequestLegacyOrManageExternalStoragePermission(
                    xodosActivity.this, requestCode, !isPermissionCallback)) {
                    if (isPermissionCallback)
                        Logger.logInfoAndShowToast(xodosActivity.this, LOG_TAG,
                            getString(com.xodos.shared.R.string.msg_storage_permission_granted_on_request));

                    xodosInstaller.setupStorageSymlinks(xodosActivity.this);
                } else {
                    if (isPermissionCallback)
                        Logger.logInfoAndShowToast(xodosActivity.this, LOG_TAG,
                            getString(com.xodos.shared.R.string.msg_storage_permission_not_granted_on_request));
                }
            }
        }.start();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        Logger.logVerbose(LOG_TAG, "onActivityResult: requestCode: " + requestCode + ", resultCode: " + resultCode + ", data: " + IntentUtils.getIntentString(data));
        if (requestCode == PermissionUtils.REQUEST_GRANT_STORAGE_PERMISSION) {
            requestStoragePermission(true);
        }
        if (requestCode == FILE_REQUEST_WINE_CODE && resultCode == RESULT_OK && data != null) {
    Uri uri = data.getData();
    if (uri != null && mStartEntryClient != null) {
        mStartEntryClient.handleWineFile(uri);
    }
}

// In Activity's 
if (requestCode == FILE_REQUEST_BACKUP_CODE && resultCode == RESULT_OK) {
    Uri uri = data.getData();
    mStartEntryClient.handleRestoreBackup(uri);
}



        if (requestCode == FILE_REQUEST_BACKUP_CODE) {
            onRequestLoadBackFile(requestCode, resultCode, data);
        }
    }

    public void reInstallCustomStartScript(Integer mode) {
        runOnUiThread(() -> {
            FileUtils.copyAssetsFile2Phone(this, "xodosu.tar.xz");
            FileUtils.copyAssetsFile2Phone(this, "installkali");
            FileUtils.copyAssetsFile2Phone(this, "installproot");
            FileUtils.copyAssetsFile2Phone(this, "switch");
            FileUtils.copyAssetsFile2Phone(this, "fix");
            FileUtils.copyAssetsFile2Phone(this, "wine.tar");
            String command = "chmod +x " + xodos_HOME_DIR_PATH + "/install && " + xodos_HOME_DIR_PATH + "/install ";
            if (mode != null) {
                command = command + mode;
            }
            command = command + "\n";
            mxodosTerminalSessionActivityClient.getCurrentStoredSessionOrLast().write(command);
        });
    }

    private void onRequestLoadBackFile(int requestCode, int resultCode, @Nullable Intent data) {
    if (resultCode == RESULT_OK && data != null) {
        Uri uri = data.getData();
        if (uri == null) return;
          // ▶︎ FIX: only pass the *allowed* read/write flags when persisting
        final int takeFlags = data.getFlags()
            & (Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        getContentResolver().takePersistableUriPermission(uri, takeFlags);
 
  
        // Universal handling for ALL storage locations:
        new Thread(() -> {
    try (InputStream in = getContentResolver().openInputStream(uri)) {
        File tempFile = File.createTempFile("restore_", ".tar.xz", getCacheDir());

        try (FileOutputStream out = new FileOutputStream(tempFile)) {
            byte[] buffer = new byte[8192];
            int read;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
            }
        }
String commandPrefix = new File(getFilesDir(), "home/storage").exists() ? 
                "" : "xodos-setup-storage; sleep 5s; ";

        String command = commandPrefix + 
    "tar -xvf " + tempFile.getAbsolutePath() + 
    " -C " + xodos_FILES_DIR_PATH + 
    " --preserve-permissions ; rm -f " + tempFile.getAbsolutePath() + "; fix && exit\n";

        runOnUiThread(() -> {
        Toast.makeText(this, "please wait: " + getString(R.string.toolbox_restore) , Toast.LENGTH_LONG).show();
            mxodosTerminalSessionActivityClient.getCurrentStoredSessionOrLast().write(command);
            mMainContentView.setTerminalViewSwitchSlider(true);
        });

    } catch (Exception e) {
        runOnUiThread(() -> {
            Toast.makeText(this, "Restore failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
        });
    }
});
}
        }
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        Logger.logVerbose(LOG_TAG, "onRequestPermissionsResult: requestCode: " + requestCode + ", permissions: " + Arrays.toString(permissions) + ", grantResults: " + Arrays.toString(grantResults));
            // ======== Add permission Block ========
    if (requestCode == REQUEST_CODE_STORAGE_PERMISSION) {
        if (grantResults.length > 0 
            && grantResults[0] == PackageManager.PERMISSION_GRANTED
            && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
            // Retry setup if permissions granted
            checkStoragePermissionsAndRun(() -> {
                xodosInstaller.setupBootstrapIfNeeded(xodosActivity.this, () -> {
                    if (mxodosService != null && mxodosService.isxodosSessionsEmpty()) {
                        mxodosTerminalSessionActivityClient.addNewSession(false, null);
                    }
                });
            });
        } else {
            new AlertDialog.Builder(this)
                .setTitle(R.string.error_permission_denied)
                .setMessage(R.string.error_storage_permission_required)
                .setPositiveButton(R.string.action_retry, (d, w) -> checkStoragePermissionsAndRun(() -> {}))
                .setNegativeButton(R.string.action_exit, (d, w) -> finish())
                .show();
        }
    }
    // ======== End of Added Block ========
        if (requestCode == PermissionUtils.REQUEST_GRANT_STORAGE_PERMISSION) {
            requestStoragePermission(true);
        }
    }


    public int getNavBarHeight() {
        return mNavBarHeight;
    }

    public xodosActivityRootView getxodosActivityRootView() {
        return mxodosActivityRootView;
    }

    public View getxodosActivityBottomSpaceView() {
        return mxodosActivityBottomSpaceView;
    }

    public ExtraKeysView getExtraKeysView() {
        return mExtraKeysView;
    }

    public xodosTerminalExtraKeys getxodosTerminalExtraKeys() {
        return mxodosTerminalExtraKeys;
    }

    public void setExtraKeysView(ExtraKeysView extraKeysView) {
        mExtraKeysView = extraKeysView;
    }

    public DrawerLayout getDrawer() {
        return (DrawerLayout) findViewById(R.id.drawer_layout);
    }


    public ViewPager getTerminalToolbarViewPager() {
        return (ViewPager) findViewById(R.id.terminal_toolbar_view_pager);
    }

    public float getTerminalToolbarDefaultHeight() {
        return mTerminalToolbarDefaultHeight;
    }

    public boolean isTerminalViewSelected() {
        return getTerminalToolbarViewPager().getCurrentItem() == 0;
    }

    public boolean isTerminalToolbarTextInputViewSelected() {
        return getTerminalToolbarViewPager().getCurrentItem() == 1;
    }


    public void xodosSessionListNotifyUpdated() {
        mxodosSessionListViewController.notifyDataSetChanged();
    }

    public boolean isVisible() {
        return mIsVisible;
    }

    public boolean isOnResumeAfterOnCreate() {
        return mIsOnResumeAfterOnCreate;
    }

    public boolean isActivityRecreated() {
        return mIsActivityRecreated;
    }


    public xodosService getxodosService() {
        return mxodosService;
    }

    public TerminalView getTerminalView() {
        return mTerminalView;
    }

    public xodosTerminalViewClient getxodosTerminalViewClient() {
        return mxodosTerminalViewClient;
    }

    public xodosTerminalSessionActivityClient getxodosTerminalSessionClient() {
        return mxodosTerminalSessionActivityClient;
    }

    @Nullable
    public TerminalSession getCurrentSession() {
        if (mTerminalView != null)
            return mTerminalView.getCurrentSession();
        else
            return null;
    }

    public xodosAppSharedPreferences getPreferences() {
        return mPreferences;
    }

    public xodosAppSharedProperties getProperties() {
        return mProperties;
    }


    public static void updatexodosActivityStyling(Context context, boolean recreateActivity) {
        // Make sure that terminal styling is always applied.
        Intent stylingIntent = new Intent(xodos_ACTIVITY.ACTION_RELOAD_STYLE);
        stylingIntent.putExtra(xodos_ACTIVITY.EXTRA_RECREATE_ACTIVITY, recreateActivity);
        context.sendBroadcast(stylingIntent);
    }

    private void registerxodosActivityBroadcastReceiver() {
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(xodos_ACTIVITY.ACTION_NOTIFY_APP_CRASH);
        intentFilter.addAction(xodos_ACTIVITY.ACTION_RELOAD_STYLE);
        intentFilter.addAction(xodos_ACTIVITY.ACTION_REQUEST_PERMISSIONS);

        registerReceiver(mxodosActivityBroadcastReceiver, intentFilter);
    }

    private void unregisterxodosActivityBroadcastReceiver() {
        unregisterReceiver(mxodosActivityBroadcastReceiver);
    }

    private void fixxodosActivityBroadcastReceiverIntent(Intent intent) {
        if (intent == null) return;

        String extraReloadStyle = intent.getStringExtra(xodos_ACTIVITY.EXTRA_RELOAD_STYLE);
        if ("storage".equals(extraReloadStyle)) {
            intent.removeExtra(xodos_ACTIVITY.EXTRA_RELOAD_STYLE);
            intent.setAction(xodos_ACTIVITY.ACTION_REQUEST_PERMISSIONS);
        }
    }

    class xodosActivityBroadcastReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (intent == null) return;

            if (mIsVisible) {
                fixxodosActivityBroadcastReceiverIntent(intent);

                switch (intent.getAction()) {
                    case xodos_ACTIVITY.ACTION_NOTIFY_APP_CRASH:
                        Logger.logDebug(LOG_TAG, "Received intent to notify app crash");
                        xodosCrashUtils.notifyAppCrashFromCrashLogFile(context, LOG_TAG);
                        return;
                    case xodos_ACTIVITY.ACTION_RELOAD_STYLE:
                        Logger.logDebug(LOG_TAG, "Received intent to reload styling");
                        reloadActivityStyling(intent.getBooleanExtra(xodos_ACTIVITY.EXTRA_RECREATE_ACTIVITY, true));
                        return;
                    case xodos_ACTIVITY.ACTION_REQUEST_PERMISSIONS:
                        Logger.logDebug(LOG_TAG, "Received intent to request storage permissions");
                        requestStoragePermission(false);
                        return;
                    default:
                }
            }
        }
    }

    private void reloadActivityStyling(boolean recreateActivity) {
        if (mProperties != null) {
            reloadProperties();

            if (mExtraKeysView != null) {
                mExtraKeysView.setButtonTextAllCaps(mProperties.shouldExtraKeysTextBeAllCaps());
                mExtraKeysView.reload(mxodosTerminalExtraKeys.getExtraKeysInfo(), mTerminalToolbarDefaultHeight);
            }

            // Update NightMode.APP_NIGHT_MODE
            xodosThemeUtils.setAppNightMode(mProperties.getNightMode());
        }

        setMargins();
        setTerminalToolbarHeight();

        FileReceiverActivity.updateFileReceiverActivityComponentsState(this);

        if (mxodosTerminalSessionActivityClient != null)
            mxodosTerminalSessionActivityClient.onReloadActivityStyling();

        if (mxodosTerminalViewClient != null)
            mxodosTerminalViewClient.onReloadActivityStyling();

        // To change the activity and drawer theme, activity needs to be recreated.
        // It will destroy the activity, including all stored variables and views, and onCreate()
        // will be called again. Extra keys input text, terminal sessions and transcripts will be preserved.
        if (recreateActivity) {
            Logger.logDebug(LOG_TAG, "Recreating activity");
            xodosActivity.this.recreate();
        }
    }


    public static void startxodosActivity(@NonNull final Context context) {
        ActivityUtils.startActivity(context, newInstance(context));
    }

    public static Intent newInstance(@NonNull final Context context) {
        Intent intent = new Intent(context, xodosActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        return intent;
    }

    public DisplaySlidingWindow getMainContentView() {
        return mMainContentView;
    }
}
