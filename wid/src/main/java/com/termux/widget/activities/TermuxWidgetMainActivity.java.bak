package com.xodos.widget.activities;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.content.Context;
import android.content.pm.ShortcutInfo;
import android.content.pm.ShortcutManager;
import android.os.Build;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import com.xodos.shared.activity.media.AppCompatActivityUtils;
import com.xodos.shared.android.PackageUtils;
import com.xodos.shared.errors.Error;
import com.xodos.shared.file.FileUtils;
import com.xodos.shared.logger.Logger;
import com.xodos.shared.markdown.MarkdownUtils;
import com.xodos.shared.xodos.xodosConstants;
import com.xodos.shared.xodos.file.xodosFileUtils;
import com.xodos.shared.theme.NightMode;
import com.xodos.widget.R;
import com.xodos.widget.ShortcutFile;
import com.xodos.widget.xodosWidgetApplication;
import com.xodos.widget.xodosWidgetProvider;
import com.xodos.widget.utils.ShortcutUtils;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class xodosWidgetMainActivity extends AppCompatActivity {

    public static final String LOG_TAG = "xodosWidgetMainActivity";

    /** xodos:Widget app data home directory path. */
    public static final String xodos_WIDGET_DATA_HOME_DIR_PATH = xodosConstants.xodos_DATA_HOME_DIR_PATH + "/widget"; // Default: "/data/data/com.xodos/files/home/.xodos/widget"

    /** xodos:Widget app directory path to store scripts/binaries to be used as dynamic shortcuts. */
    public static final String xodos_WIDGET_DYNAMIC_SHORTCUTS_DIR_PATH = xodos_WIDGET_DATA_HOME_DIR_PATH + "/dynamic_shortcuts"; // Default: "/data/data/com.xodos/files/home/.xodos/widget/dynamic_shortcuts"

    public static final String MAX_SHORTCUTS_LIMIT_DOCS_URL = xodosConstants.xodos_WIDGET_GITHUB_REPO_URL + "#max-shortcuts-limit-optional"; // Default: "https://github.com/xodos/xodos-widget#max-shortcuts-limit-optional"

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Logger.logDebug(LOG_TAG, "onCreate");

        setContentView(R.layout.activity_xodos_widget_main);

        AppCompatActivityUtils.setNightMode(this, NightMode.getAppNightMode().getName(), true);

        AppCompatActivityUtils.setToolbar(this, com.xodos.shared.R.id.toolbar);
        AppCompatActivityUtils.setToolbarTitle(this, com.xodos.shared.R.id.toolbar, xodosConstants.xodos_WIDGET_APP_NAME, 0);

        TextView pluginInfo = findViewById(R.id.textview_plugin_info);
        pluginInfo.setText(getString(R.string.plugin_info, xodosConstants.xodos_GITHUB_REPO_URL,
                xodosConstants.xodos_WIDGET_GITHUB_REPO_URL));

        setDynamicShortcutsViews();
        setRefreshAllWidgetsViews();
        sendIntentToRefreshAllWidgets();
    }

    @Override
    protected void onResume() {
        super.onResume();

        // Set log level for the app
        xodosWidgetApplication.setLogConfig(this, false);

        Logger.logVerbose(LOG_TAG, "onResume");

        setChangeLauncherActivityStateViews();
        setMaxShortcutsLimitView();
    }

    private void setMaxShortcutsLimitView() {
        LinearLayout maxShortcutsInfoLinearLayout = findViewById(R.id.linearlayout_max_shortcuts_limit_info);
        maxShortcutsInfoLinearLayout.setVisibility(View.GONE);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1) {
            ShortcutManager shortcutManager = ShortcutUtils.getShortcutManager(this, LOG_TAG, true);
            TextView maxShortcutsInfoTextView = findViewById(R.id.textview_max_shortcuts_limit_info);
            if (shortcutManager != null) {
                maxShortcutsInfoLinearLayout.setVisibility(View.VISIBLE);
                maxShortcutsInfoTextView.setText(getString(R.string.msg_max_shortcuts_limit_info,
                        shortcutManager.getMaxShortcutCountPerActivity(), MAX_SHORTCUTS_LIMIT_DOCS_URL));
            }
        }
    }

    private void setChangeLauncherActivityStateViews() {
        String packageName = xodosConstants.xodos_WIDGET_PACKAGE_NAME;
        String className = xodosConstants.xodos_WIDGET.xodos_WIDGET_LAUNCHER_ACTIVITY_NAME;

        TextView changeLauncherActivityStateTextView = findViewById(R.id.textview_change_launcher_activity_state_details);
        changeLauncherActivityStateTextView.setText(MarkdownUtils.getSpannedMarkdownText(this,
                getString(R.string.msg_change_launcher_activity_state_info, packageName, getClass().getName())));

        Button changeLauncherActivityStateButton = findViewById(R.id.button_change_launcher_activity_state);
        String stateChangeMessage;
        boolean newState;

        Boolean currentlyDisabled = PackageUtils.isComponentDisabled(this,
                packageName, className, false);
        if (currentlyDisabled == null) {
            Logger.logError(LOG_TAG, "Failed to check if \"" + packageName + "/" + className + "\" launcher activity is disabled");
            changeLauncherActivityStateButton.setEnabled(false);
            changeLauncherActivityStateButton.setAlpha(.5f);
            changeLauncherActivityStateButton.setText(com.xodos.shared.R.string.action_disable_launcher_icon);
            changeLauncherActivityStateButton.setOnClickListener(null);
            return;
        }

        changeLauncherActivityStateButton.setEnabled(true);
        changeLauncherActivityStateButton.setAlpha(1f);
        if (currentlyDisabled) {
            changeLauncherActivityStateButton.setText(com.xodos.shared.R.string.action_enable_launcher_icon);
            stateChangeMessage = getString(com.xodos.shared.R.string.msg_enabling_launcher_icon, xodosConstants.xodos_WIDGET_APP_NAME);
            newState = true;
        } else {
            changeLauncherActivityStateButton.setText(com.xodos.shared.R.string.action_disable_launcher_icon);
            stateChangeMessage = getString(com.xodos.shared.R.string.msg_disabling_launcher_icon, xodosConstants.xodos_WIDGET_APP_NAME);
            newState = false;
        }

        changeLauncherActivityStateButton.setOnClickListener(v -> {
            Logger.logInfo(LOG_TAG, stateChangeMessage);
            String errmsg = PackageUtils.setComponentState(this,
                    packageName, className, newState, stateChangeMessage, true);
            if (errmsg == null)
                setChangeLauncherActivityStateViews();
            else
                Logger.logError(LOG_TAG, errmsg);
        });
    }

    private void setDynamicShortcutsViews() {
        LinearLayout dynamicShortcutsLinearLayout = findViewById(R.id.linearlayout_dynamic_shortcuts);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1) {
            dynamicShortcutsLinearLayout.setVisibility(View.VISIBLE);

            TextView dynamicShortcutsInfoTextView = findViewById(R.id.textview_dynamic_shortcuts_info);
            dynamicShortcutsInfoTextView.setText(MarkdownUtils.getSpannedMarkdownText(this,
                    getString(R.string.msg_dynamic_shortcuts_info,
                    xodosFileUtils.getUnExpandedxodosPath(xodos_WIDGET_DYNAMIC_SHORTCUTS_DIR_PATH))));

            Button createDynamicShortcutsButton = findViewById(R.id.button_create_dynamic_shortcuts);
            createDynamicShortcutsButton.setOnClickListener(v -> createDynamicShortcuts(this));

            Button removeDynamicShortcutsButton = findViewById(R.id.button_remove_dynamic_shortcuts);
            removeDynamicShortcutsButton.setOnClickListener(v -> removeDynamicShortcuts(this));
        } else {
            dynamicShortcutsLinearLayout.setVisibility(View.GONE);
        }
    }

    private void setRefreshAllWidgetsViews() {
        Button refreshAllWidgetsIconButton = findViewById(R.id.button_refresh_all_widgets);
        refreshAllWidgetsIconButton.setOnClickListener(
                v -> sendIntentToRefreshAllWidgets());
    }

    public void sendIntentToRefreshAllWidgets() {
        xodosWidgetProvider.sendIntentToRefreshAllWidgets(this, LOG_TAG);
    }

    @RequiresApi(Build.VERSION_CODES.N_MR1)
    private void createDynamicShortcuts(@NonNull Context context) {
        ShortcutManager shortcutManager = ShortcutUtils.getShortcutManager(context, LOG_TAG, true);
        if (shortcutManager == null) return;

        // Create directory if necessary so user more easily finds where to put shortcuts
        Error error = FileUtils.createDirectoryFile(xodos_WIDGET_DYNAMIC_SHORTCUTS_DIR_PATH);
        if (error != null) {
            Logger.logError(LOG_TAG, error.toString());
            Logger.showToast(this, error.getMinimalErrorLogString(), true);
        }

        List<ShortcutFile> shortcutFiles = new ArrayList<>();
        ShortcutUtils.enumerateShortcutFiles(shortcutFiles, new File(xodos_WIDGET_DYNAMIC_SHORTCUTS_DIR_PATH), false);

        if (shortcutFiles.size() == 0) {
            Logger.showToast(context, getString(R.string.msg_no_shortcut_files_found_in_directory,
                    xodosFileUtils.getUnExpandedxodosPath(xodos_WIDGET_DYNAMIC_SHORTCUTS_DIR_PATH)), true);
            return;
        }

        List<ShortcutInfo> shortcuts = new ArrayList<>();
        for (ShortcutFile shortcutFile : shortcutFiles) {
            shortcuts.add(shortcutFile.getShortcutInfo(context, false));
        }

        // Remove shortcuts that can not be added.
        int maxShortcuts = shortcutManager.getMaxShortcutCountPerActivity();
        Logger.logDebug(LOG_TAG, "Found " + shortcutFiles.size() + " shortcuts and max shortcuts limit is " + maxShortcuts);
        if (shortcuts.size() > maxShortcuts) {
            Logger.logErrorAndShowToast(context, LOG_TAG, getString(R.string.msg_dynamic_shortcuts_limit_reached, maxShortcuts));
            while (shortcuts.size() > maxShortcuts) {
                String message = getString(R.string.msg_skipping_shortcut,
                        shortcuts.get(shortcuts.size() - 1).getId().replaceAll(
                                "^" + Pattern.quote(xodos_WIDGET_DYNAMIC_SHORTCUTS_DIR_PATH + "/"), ""));
                Logger.showToast(context, message, false);
                Logger.logDebug(LOG_TAG, message);
                shortcuts.remove(shortcuts.size() - 1);
            }
        }

        shortcutManager.removeAllDynamicShortcuts();
        shortcutManager.addDynamicShortcuts(shortcuts);
        Logger.logDebugAndShowToast(context, LOG_TAG, getString(R.string.msg_created_dynamic_shortcuts_successfully, shortcuts.size()));
    }

    @RequiresApi(Build.VERSION_CODES.N_MR1)
    private void removeDynamicShortcuts(@NonNull Context context) {
        ShortcutManager shortcutManager = ShortcutUtils.getShortcutManager(context, LOG_TAG, true);
        if (shortcutManager == null) return;

        List<ShortcutInfo> shortcuts = shortcutManager.getDynamicShortcuts();
        if (shortcuts != null && shortcuts.size() == 0) {
            Logger.logDebugAndShowToast(context, LOG_TAG, getString(R.string.msg_no_dynamic_shortcuts_currently_created));
            return;
        }

        shortcutManager.removeAllDynamicShortcuts();
        Logger.logDebugAndShowToast(context, LOG_TAG, getString(R.string.msg_removed_dynamic_shortcuts_successfully));
    }

}
